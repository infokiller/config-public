#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

# This script can be called using sudo, so we can't fall back to $HOME.
# shellcheck disable=SC2155
readonly REPO_ROOT="$(config-repo-root "${BASH_SOURCE[0]}")"

# shellcheck source=../lib/base.sh
source "${REPO_ROOT}/.my_scripts/lib/base.sh"

_update_pacman_mirrors() {
  # Refresh keys. This is required for handling new and expired keys properly.
  # As of 2020-05-29, `pacman-key --refresh-keys` has issues.
  # As of 2022-02-19, I still get a few errors when running it, but it seems
  # like it may not be a real problem:
  # https://bbs.archlinux.org/viewtopic.php?id=273563
  # sudo pacman-key --refresh-keys

  # As of 2022-07-25, this is disabled because it can cause a partial update. I
  # think I originally used it in install-new-workstation, but I'm not sure if
  # it's needed now.
  # # Create package database- needed to be done once.
  # sudo pacman --files --refresh

  sudo pacman --sync --needed --noconfirm reflector
  # Remove lines starting with comments and whitespace-only lines
  mapfile -t opts < <(grep -Ev '^\s*(#|$)' "${REPO_ROOT}/.config/reflector.conf")
  sudo reflector "${opts[@]}"
}

main() {
  local last_update_date
  last_update_date="$(grep -Ei '#\s+Retrieved:' /etc/pacman.d/mirrorlist |
    head -1 | sed -r 's/#\s*Retrieved:\s*(\S+).*$/\1/')" || true
  if [[ -n "${last_update_date}" ]]; then
    print_bold 'Pacman mirrors last update date: ' "${last_update_date}"
  else
    print_warning 'Could not detect last pacman mirrors update'
    _update_pacman_mirrors
    return $?
  fi
  # Update mirrors using reflector if more than one week has passed since the
  # last update.
  local last_update_timestamp
  if ((${PACMAN_REFRESH_MIRRORS_FORCE:-0})); then
    print_bold 'Forcing pacman mirror refresh'
  elif ! last_update_timestamp="$(date -d "${last_update_date}" +%s 2>&1)"; then
    print_warning 'Could not parse mirrors update date, updating them.'
  elif [[ "${last_update_timestamp}" -lt "$(date -d '-30 days' +%s)" ]]; then
    print_bold 'Pacman mirrors not updated in more than 30 days, updating keys and mirrors.'
  else
    print_bold 'Pacman mirrors fresh enough, not updating.'
    return 0
  fi
  _update_pacman_mirrors
}

main "$@"
