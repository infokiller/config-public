#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

readonly RSYNC_CMD=(
  rsync --archive --acls --xattrs --one-file-system --hard-links --stats
  --human-readable --partial --progress --delete
)

readonly HOME_PARTIAL_EXCLUDES='
*/.cache/***
*/.local/share/Trash/***
*/.local/share/selfspy/***
*/.local/share/activitywatch/***
*/.local/share/pip/***
*/.local/share/Steam/***
*/.local/share/rustup/***
*/.local/var/libvirt/***
*/.mozilla/***
*/.npm/***
*/.tor-browser/***
*/.vscode/***
*/.vscode-oss/***
*/gdrive/***
*/src/***
*/tmp/***
**.pt
**.pyc
**.pytorch
.tox/***
__pycache__/***
node_modules/***
*/.config/syncthing/***
*/.config/chromium/*/Application Cache
*/.config/chromium/*/Extensions
*/.config/chromium/*/GPUCache
*/.config/chromium/*/Service Worker/*Cache*
'

declare -g src
declare -g dst
declare -g efi_device
declare -g root_device

_print_bold() {
  local bold normal
  bold="$(tput bold 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf '%s' "${bold}"
  printf '%s' "${@}"
  printf '%s\n' "${normal}"
}

_print_warning() {
  local warning normal
  # Yellow color
  warning="$(tput setaf 3 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf >&2 '%s\n' "${warning}${*}${normal}"
}

_print_error() {
  local error normal
  # Red color
  error="$(tput setaf 1 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf >&2 '%s\n' "${error}${*}${normal}"
}

_mnt_btrfs_subvol() {
  (($# == 2)) || {
    printf >&2 'Usage: %s subvol_name' "${FUNCNAME[0]}"
    return 1
  }
  local subvol="$1"
  local subdir="$2"
  _print_bold "Mounting subvolume $subvol"
  mkdir -p -- "${dst}/${subdir}"
  local files
  mapfile -t -d '' files < <(sudo find "${dst}/${subdir}" -mindepth 1 -maxdepth 1 -print0)
  ((${#files[@]} == 0)) || {
    printf >&2 'Directory %s is not empty (%s files)' "${dst}/${subdir}" "${#files[@]}"
    return 1
  }
  sudo mount -o noatime,nodiratime,compress=zstd,subvol="${subvol}" "${root_device}" "${dst}/${subdir}"
}

_print_usage_and_die() {
  _print_error "Usage: $0 --src <SRC_DIR> --dst <DST_DIR> --efi-device <EFI_DEV> --root-device <ROOT_DEV> --new-fstab <NEW_FSTAB> --mode [(minimal|partial|full)]"
  exit 1
}

main() {
  # mode can be one of minimal, partial, or full
  local mode=minimal
  local new_fstab
  while (($# > 0)); do
    case "$1" in
      --src)
        src="$2"
        shift 2
        ;;
      --dst)
        dst="$2"
        shift 2
        ;;
      --mode)
        mode="$2"
        if [[ ${mode} != minimal && ${mode} != partial && ${mode} != full ]]; then
          _print_error "Invalid mode: ${mode}"
          _print_usage_and_die
        fi
        shift 2
        ;;
      --efi-device)
        efi_device="$2"
        shift 2
        ;;
      --root-device)
        root_device="$2"
        shift 2
        ;;
      --new-fstab)
        new_fstab="$2"
        shift 2
        ;;
      *)
        _print_usage_and_die
        ;;
    esac
  done
  if [[ -z ${dst:-} || -z ${efi_device:-} || -z ${root_device:-} || -z ${new_fstab:-} ]]; then
    _print_usage_and_die
  fi
  while grep "${dst}" /proc/mounts; do
    sudo umount -R -- "${dst}" || sleep 3
  done
  # grep "${dst}" /proc/mounts | awk '{print $2}' | xargs --no-run-if-empty umount
  local s=0
  _mnt_btrfs_subvol @root '' || s=1
  _mnt_btrfs_subvol / btrfs-root || s=1
  _mnt_btrfs_subvol @home home || s=1
  _mnt_btrfs_subvol @pkgs var/cache/pacman || s=1
  _mnt_btrfs_subvol @docker var/lib/docker || s=1
  _mnt_btrfs_subvol @logs var/log || s=1
  _mnt_btrfs_subvol @snapshots .snapshots || s=1
  _mnt_btrfs_subvol @swap swap || s=1
  if ((s)); then
    echo 'Errors, stopping'
    return
  fi
  for d in "${dst}/home"/*; do
    "${DIR}/btrfs-set-nocow" --root-dir "${dst}" --user-dir "${d}"
  done
  chattr +C "${dst}/var/cache"
  rm -rf "${dst:?}/boot" && mkdir -p "${dst}/boot"
  mount "${efi_device}" "${dst}/boot"
  if [[ ${mode} == minimal ]]; then
    sudo "${RSYNC_CMD[@]}" "${src}/etc/" "${dst}/etc/"
  else
    # https://superuser.com/a/709224
    # The commented excludes are not needed because they are on different
    # filesystems and we use the rsync flag -x.
    # --exclude={/dev/'*',/proc/'*',/sys/'*',/tmp/'*',/run/'*',/mnt/'*',/lost+found}
    sudo "${RSYNC_CMD[@]}" --exclude=/boot --exclude=/mnt --exclude=/home --exclude=/etc/fstab "${src}/" "${dst}/"
  fi
  sudo "${RSYNC_CMD[@]}" --exclude='*/' --exclude '*/*' "${src}/boot/" "${dst}/boot"
  sudo "${RSYNC_CMD[@]}" "${src}/boot/efi/EFI/" "${dst}/boot/EFI/"
  if [[ ${mode} == full ]]; then
    sudo "${RSYNC_CMD[@]}" "${src}/home/" "${dst}/home"
  elif [[ ${mode} == partial ]]; then
    local tmpfile
    tmpfile="$(mktemp -t 'rsync_home_excludes.XXXXXXX')"
    printf '%s\n' "${HOME_PARTIAL_EXCLUDES}" >> "${tmpfile}"
    sudo "${RSYNC_CMD[@]}" --exclude-from="${tmpfile}" "${src}/home/" "${dst}/home"
  fi
  cp -- "${new_fstab}" "${dst}/etc/fstab"
  while grep "${dst}" /proc/mounts; do
    sudo umount -R -- "${dst}" || sleep 3
  done
}

main "$@"
