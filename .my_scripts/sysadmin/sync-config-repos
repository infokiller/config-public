#!/usr/bin/env bash
# Inspired by: https://github.com/romkatv/dotfiles-public/blob/master/dotfiles/functions/sync-dotfiles
#
# TODO: Test this script when REPO_ROOT is not HOME.

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

# shellcheck disable=SC2155
readonly REPO_ROOT="$([[ ${CONFIG_GET_ROOT:-0} == 1 ]] && config-repo-root "${BASH_SOURCE[0]}" || echo "${HOME}")"
readonly SUBMODULES_DIR="${REPO_ROOT}/submodules"

readonly PUBLIC_CONFIG_GIT_DIR="${REPO_ROOT}/.local/var/git_dirs/config-public"
readonly PRIVATE_CONFIG_GIT_DIR="${REPO_ROOT}/.local/var/git_dirs/config-private"

readonly HISTORY_REPO_DIR="${REPO_ROOT}/.local/var/hist"

readonly CONFIG_PUBLIC_REMOTE_URL='https://gitlab.com/infokiller/config-public'
readonly CONFIG_PRIVATE_REMOTE_URL='https://gitlab.com/infokiller/config-private'
readonly HISTORY_REMOTE_URL='https://gitlab.com/infokiller/history'

readonly DCONF_DIR="${REPO_ROOT}/.config/dconf"

# shellcheck source=../lib/base.sh
source "${REPO_ROOT}/.my_scripts/lib/base.sh"
# shellcheck source=../lib/platform_detection.sh
source "${REPO_ROOT}/.my_scripts/lib/platform_detection.sh"
# For HOST_ALIAS, HOST_HIST_DIR
# shellcheck source=../../.profile
source "${REPO_ROOT}/.profile"

_log_info() {
  printf 'sync-config-repos: %s\n' "$*"
}

_log_error() {
  print_error "$(printf 'sync-config-repos: %s' "$*")"
}

_log_warning() {
  print_warning "$(printf 'sync-config-repos: %s' "$*")"
}

_git_public_config=(git --git-dir="${PUBLIC_CONFIG_GIT_DIR}"
  --work-tree="${REPO_ROOT}")
_git_private_config=(git --git-dir="${PRIVATE_CONFIG_GIT_DIR}"
  --work-tree="${REPO_ROOT}")

_migrate_private_repo() {
  if [[ -d "${PRIVATE_CONFIG_GIT_DIR}" ]]; then
    _log_info 'Private config repo already migrated'
    return
  fi
  if [[ ! -d "${REPO_ROOT}/.git" ]]; then
    _log_error "No git repo dir found in ${REPO_ROOT}"
    return 1
  fi
  _log_info 'Found old git dir, migrating it to private config repo'
  mkdir -p -- "$(dirname "${PRIVATE_CONFIG_GIT_DIR}")"
  mv -- "${REPO_ROOT}/.git" "${PRIVATE_CONFIG_GIT_DIR}"
  # Fix submodule path corruption from move.
  if [[ -d "${PRIVATE_CONFIG_GIT_DIR}/modules" ]]; then
    find "${PRIVATE_CONFIG_GIT_DIR}/modules" -name config -print0 |
      xargs --null --no-run-if-empty sed -i -E \
        's%../submodules%../../../../submodules%'
  fi
  find "${SUBMODULES_DIR}" -name .git -type f -print0 |
    xargs --null --no-run-if-empty sed -i -E \
      's%(gitdir:.*\.\./)\.git%\1.local/var/git_dirs/config-public%'
}

_migrate_submodules_git_dirs() {
  mapfile -t -d '' gitlinks < <(find "${SUBMODULES_DIR}" -name .git -type f -print0)
  local has_public=0 has_private=0
  grep -q config-public "${gitlinks[@]}" && has_public=1
  grep -q config-private "${gitlinks[@]}" && has_private=1
  # This was originally an error and then demoted to a warning, but this
  # situation is actually expected because new submodules were added to the
  # public repo.
  # if ((has_public && has_private)); then
  #   _log_warning 'Submodules gitlinks point both to public and private repo'
  # fi
  if ((!has_public && !has_private)); then
    _log_error 'Submodules gitlinks have unexpected paths'
    return 1
  fi
  if ((!has_private)); then
    _log_info 'All submodules already in public repo'
    return
  fi
  sed -i -E 's%git_dirs/config-private%git_dirs/config-public%' "${gitlinks[@]}"
  if [[ -e "${PRIVATE_CONFIG_GIT_DIR}/modules" ]]; then
    # Move submodules from private repo to public one.
    # NOTE: the trailing slash in the rsync source path is required:
    # https://stackoverflow.com/a/31278462/1014208
    rsync -aAXv --ignore-existing --info=flist2,name,progress -- \
      "${PRIVATE_CONFIG_GIT_DIR}/modules/" "${PUBLIC_CONFIG_GIT_DIR}/modules"
    rm -rf -- "${PRIVATE_CONFIG_GIT_DIR}/modules"
  fi
}

# Moving submodules may create unmerged paths which we need to reset. Note that
# git help says to do a `restore --staged` but it fails with "path is unmerged"
# https://stackoverflow.com/a/28066445/1014208
_fix_unmerged_submodules() {
  git --no-pager diff --diff-filter=U --name-only --no-renames -z \
    -- "${REPO_ROOT}/.gitmodules" "${SUBMODULES_DIR}" |
    xargs --no-run-if-empty --null git reset --
}

_move_packages_if_needed() {
  local prefix="${REPO_ROOT}/.local"
  local rebuild_required=0
  if [[ ! -d "${prefix}/pkg" ]]; then
    rebuild_required=1
    mkdir -p -- "${prefix}/pkg"
  fi
  local package_manager
  for package_manager in go cargo gem standalone; do
    if [[ -d "${prefix}/${package_manager}" ]]; then
      rebuild_required=1
      mv -- "${prefix}/${package_manager}" "${prefix}/pkg"
    fi
  done
  # npm is a special case: it contains tracked files so we only need to move the
  # other files.
  if [[ -d "${prefix}/npm" ]]; then
    rebuild_required=1
    mv -- "${prefix}/npm/node_modules" "${prefix}/pkg/npm/node_modules"
    rm -rf -- "${prefix}/npm"
  fi
  # conda is a special case: we can't just move it because libraries and
  # binaries have the full path hardcoded in them. We could do a search and
  # replace, but it's probably safer to remove it and recreate it.
  if [[ -d "${prefix}/conda" ]]; then
    rebuild_required=1
    rm -rf -- "${prefix}/conda"
  fi
  if ((rebuild_required)); then
    _log_info 'Rebuilding packages'
    "${REPO_ROOT}/install/install-crossdistro-local-packages"
  fi
}

_move_rofi_history_if_needed() {
  for f in "${XDG_CACHE_HOME:-${HOME}/.cache}"/rofi*; do
    if [[ -f "${f}" ]]; then
      mv -- "${f}" "${HOST_HIST_DIR}"
    fi
  done
}

_migrate_dir_if_needed() {
  local old="$1"
  local new="$2"
  if [[ ! -d "${old}" ]]; then
    return
  fi
  if [[ ! -d "${new}" ]]; then
    mv -- "${old}" "${new}"
    return
  fi
  mkdir -p -- "${new}"
  find -- "${old}" -mindepth 1 -maxdepth 1 -print0 |
    xargs --no-run-if-empty --null mv -t "${new}"
  rmdir -- "${old}"
}

_update_private_repo_url() {
  local git=(git "--git-dir=${PRIVATE_CONFIG_GIT_DIR}" "--work-tree=${REPO_ROOT}")
  if [[ "$("${git[@]}" remote get-url origin)" == *'/infokiller/config-git'* ]]; then
    _log_info 'Updating origin to point to the new private config URL'
    # Workaround to the error 'warning: remote.origin.url has multiple values'.
    "${git[@]}" remote remove origin
    "${git[@]}" remote add origin "${CONFIG_PRIVATE_REMOTE_URL[@]}"
  fi
}

_init_repo_in_existing_dir() {
  local git_dir="$1"
  local work_tree="$2"
  local remote_url="$3"
  local git=(git "--git-dir=${git_dir}" "--work-tree=${work_tree}")
  if [[ -d "${git_dir}" ]]; then
    _log_info 'Repo exists, not initializing it.'
    # Not sure why, but git can delete a lot of repo files after a hard reset
    # which is needed when the history changed, so we restore them.
    "${git[@]}" --no-pager diff --diff-filter=D --name-only --no-renames -z |
      xargs -0 -r "${git[@]}" checkout --
  else
    _log_info 'Repo not found, initializing it'
    mkdir -p -- "$(dirname "${work_tree}")"
    "${git[@]}" clone --bare "${remote_url}" "${git_dir}"
    "${git[@]}" init
    # Unstage all files. I'm not sure why, but after initializing the bare repo
    # git may have some files staged.
    "${git[@]}" reset --quiet
    # Restore files that are marked as deleted because they are in master but
    # were not in the directory before cloning the repo.
    "${git[@]}" --no-pager diff --diff-filter=D --name-only --no-renames -z |
      xargs -0 -r "${git[@]}" checkout --
  fi
  # Workaround to the remote not being set correctly.
  "${git[@]}" remote remove origin
  "${git[@]}" remote add origin "${remote_url}"
  "${git[@]}" fetch origin
  "${git[@]}" branch --set-upstream-to=origin/master master
}

_add_excludes() {
  local gitdir="$1"
  append_line_if_needed "${gitdir}/info/exclude" "${@:2}"
}

_verify_dconf() {
  local dconf_dump
  dconf_dump="$(mktemp -t dconf_dump_XXX)"
  # NOTE: The path variable in trap must be expanded here because it may not be
  # defined when the trap is ran.
  # shellcheck disable=SC2064
  trap "rm -- '${dconf_dump}' &> /dev/null || true" EXIT ERR INT HUP TERM
  dconf dump / > "${dconf_dump}"
  local configs=("${DCONF_DIR}/base.ini")
  if [[ -f "${DCONF_DIR}/${HOST_ALIAS}.ini" ]]; then
    configs+=("${DCONF_DIR}/${HOST_ALIAS}.ini")
  fi
  if ! "${DCONF_DIR}/dconf_diff.py" \
    --base-configs "$(join_by ',' "${configs[@]}")" \
    --other-configs "${dconf_dump}"; then
    _log_warning 'dconf diff found'
    _log_warning 'To update repo config, update files in ~/.config/dconf'
    _log_warning 'To update machine config, run ~/.config/dconf/load-config'
  fi
  rm -- "${dconf_dump}"
}

_get_common_excludes() {
  # Private excludes shared by both public and private repos.
  cat -- "${REPO_ROOT}/.gitignore_private"
  # DGX machines create some files in the home directory that should be ignored.
  # In addition, as of 2020-04-12 they don't have recent versions of exa/eza.
  # Is this general to Ubuntu 20.04?
  if is_nvidia_dgx; then
    local dgx_excludes=(
      '/.sudo_as_admin_successful'
      '/.Xauthority'
      '/.xsel.log'
      '/.config/desktop/Getting\ Started'
    )
    printf '%s\n' "${dgx_excludes[@]}"
  fi
}

_set_local_excludes() {
  mapfile -t common_excludes < <(_get_common_excludes)
  local public_repo_excludes=("${common_excludes[@]}")
  mapfile -t -O "${#public_repo_excludes[@]}" public_repo_excludes < <(
    cd -- "${REPO_ROOT}" || return
    "${_git_private_config[@]}" ls-files | awk '{print "/"$0}'
  )
  local private_repo_excludes=("${common_excludes[@]}")
  mapfile -t -O "${#private_repo_excludes[@]}" private_repo_excludes < <(
    cd -- "${REPO_ROOT}" || return
    "${_git_public_config[@]}" ls-files | awk '{print "/"$0}'
  )
  _log_info 'Adding public repo excludes'
  printf '' >| "${PUBLIC_CONFIG_GIT_DIR}/info/exclude"
  _add_excludes "${PUBLIC_CONFIG_GIT_DIR}" "${public_repo_excludes[@]}"
  _log_info 'Adding private repo excludes'
  printf '' >| "${PRIVATE_CONFIG_GIT_DIR}/info/exclude"
  _add_excludes "${PRIVATE_CONFIG_GIT_DIR}" "${private_repo_excludes[@]}"
  # # Exclude all files by default from public repo.
  # _add_excludes "${PUBLIC_CONFIG_GIT_DIR}" '*'
}

_set_local_git_config() {
  # Setting ${GIT_WORK_TREE} is needed for powerlevel10k. See:
  # https://github.com/romkatv/powerlevel10k/issues/491#issuecomment-586580015
  "${_git_public_config[@]}" config core.worktree "${REPO_ROOT}"
  "${_git_private_config[@]}" config core.worktree "${REPO_ROOT}"
  _log_info 'Setting precommit config'
  "${_git_public_config[@]}" config blacklist-hook.mode error
  "${_git_public_config[@]}" config secret-detection-hook.mode error
  "${_git_private_config[@]}" config blacklist-hook.mode warning
  "${_git_private_config[@]}" config secret-detection-hook.mode warning
  # Ignore files with machine specific modifications.
  (
    cd -- "${REPO_ROOT}" || return
    "${_git_public_config[@]}" update-index --assume-unchanged \
      .config/kdeglobals
    "${_git_private_config[@]}" update-index --assume-unchanged \
      .config/rclone/rclone.conf
    "${_git_private_config[@]}" update-index --assume-unchanged \
      .clasprc.json
  )
  _set_local_excludes
}

_init_repos() {
  _migrate_private_repo
  _migrate_submodules_git_dirs
  _update_private_repo_url
  _log_info 'Checking if public config repo needs initialization'
  _init_repo_in_existing_dir "${PUBLIC_CONFIG_GIT_DIR}" "${REPO_ROOT}" \
    "${CONFIG_PUBLIC_REMOTE_URL}"
  _log_info 'Checking if private config repo needs initialization'
  _init_repo_in_existing_dir "${PRIVATE_CONFIG_GIT_DIR}" "${REPO_ROOT}" \
    "${CONFIG_PRIVATE_REMOTE_URL}"
  _log_info 'Checking if history repo needs initialization'
  _init_repo_in_existing_dir "${HISTORY_REPO_DIR}/.git" "${HISTORY_REPO_DIR}" \
    "${HISTORY_REMOTE_URL}"
  _log_info 'Setting public repo to primary'
  # Add public repo as default repo in ${REPO_ROOT}.
  # NOTE: As of 2020-02-14, I'm using a symlink because of:
  # https://github.com/romkatv/powerlevel10k/issues/491
  [[ -L "${REPO_ROOT}/.git" ]] && rm -- "${REPO_ROOT}/.git"
  printf 'gitdir: %s\n' "${PUBLIC_CONFIG_GIT_DIR}" >| "${REPO_ROOT}/.git"
}

main() {
  # Run the script from the repo root to have a consistent environment between
  # runs. I tried to make the code robust to running from other working
  # directories, but let's do this just in case I missed something.
  cd -- "${REPO_ROOT}"
  _init_repos
  # shellcheck disable=SC2030,SC2031
  (
    export GIT_WORK_TREE="${REPO_ROOT}" GIT_DIR="${PUBLIC_CONFIG_GIT_DIR}"
    _fix_unmerged_submodules
    "${REPO_ROOT}/.my_scripts/sysadmin/git-sensible-update"
    "${REPO_ROOT}/.my_scripts/sysadmin/init-submodules"
  )
  # shellcheck disable=SC2030,SC2031
  (
    export GIT_WORK_TREE="${REPO_ROOT}" GIT_DIR="${PRIVATE_CONFIG_GIT_DIR}"
    _fix_unmerged_submodules
    "${REPO_ROOT}/.my_scripts/sysadmin/git-sensible-update"
    "${REPO_ROOT}/.my_scripts/sysadmin/init-submodules"
  )
  # shellcheck disable=SC2030,SC2031
  (
    _log_info 'Syncing history repo'
    export GIT_WORK_TREE="${HISTORY_REPO_DIR}" GIT_DIR="${HISTORY_REPO_DIR}/.git"
    git pull --rebase
    if [[ -n "$(git status --porcelain -- "${GIT_WORK_TREE}/${HOSTNAME}")" ]]; then
      git add -- "${GIT_WORK_TREE}/${HOSTNAME}"
      git commit --no-verify -m "Update ${HOSTNAME} history"
      git push
    fi
  )
  # NOTE: this should be done after updating the config repos because the
  # excluded files may be changed in the update.
  _set_local_git_config
  _log_info 'Verifying dconf data is synced with config'
  _verify_dconf
  _move_packages_if_needed
  _move_rofi_history_if_needed
  _migrate_dir_if_needed "${REPO_ROOT}/downloads" "${REPO_ROOT}/dl"
  _migrate_dir_if_needed "${HOME}/.local/var/i3-resurrect" "${HOST_HIST_DIR}/i3-resurrect"
}

main "$@"
