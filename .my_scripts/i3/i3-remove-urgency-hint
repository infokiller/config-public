#!/usr/bin/env python3
# NOTE: This script doesn't work, see note below. I'm actually using
# ~/.my_scripts/desktop_env/wmctrl-all-windows.
# pylint: disable=invalid-name
# pylint: disable=unused-import

import argparse
import logging
import pprint
import sys
from typing import List, Optional

import Xlib
import Xlib.display

_LOG_FMT = '%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s'

_logger = logging.getLogger('i3-remove-urgency-hint')


def _init_logger(logger) -> None:
    stdout_handler = logging.StreamHandler()
    formatter = logging.Formatter(_LOG_FMT)
    stdout_handler.setFormatter(formatter)
    logger.addHandler(stdout_handler)


def _create_args_parser() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description='Removes urgency hints from all windows.')
    parser.add_argument('--log-level',
                        choices=('debug', 'info', 'warning', 'error',
                                 'critical'),
                        default='warning',
                        help='Logging level for stderr.')
    return parser


def main():
    sys.exit('Script should be fixed')
    _init_logger(_logger)
    args = _create_args_parser().parse_args()
    _logger.setLevel(getattr(logging, args.log_level.upper()))
    display = Xlib.display.Display()
    for win in display.screen().root.query_tree().children:
        hints = win.get_wm_hints()
        if hints is None:
            continue
        # print(win, win.get_wm_name())
        win.set_wm_hints({'flags': hints['flags'] & ~Xlib.Xutil.UrgencyHint})
        # NOTE: set_wm_hints works for me in IPython if I call get_wm_hints
        # after it, but not in this script.
        # win.get_wm_hints()


if __name__ == '__main__':
    main()
