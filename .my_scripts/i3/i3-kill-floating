#!/usr/bin/env python3
# pylint: disable=invalid-name
# pylint: disable=unused-import

import argparse
import logging

import i3ipc

_LOG_FMT = '%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s'

_logger = logging.getLogger('i3-kill-floating')


def _init_logger(logger) -> None:
    stdout_handler = logging.StreamHandler()
    formatter = logging.Formatter(_LOG_FMT)
    stdout_handler.setFormatter(formatter)
    logger.addHandler(stdout_handler)


def _create_args_parser() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description='Kills floating containers.')
    parser.add_argument('--log-level',
                        choices=('debug', 'info', 'warning', 'error',
                                 'critical'),
                        default='warning',
                        help='Logging level for stderr.')
    parser.add_argument('--include-scratchpad',
                        dest='include_scratchpad',
                        action='store_true')
    parser.add_argument('--no-include-scratchpad',
                        dest='include_scratchpad',
                        action='store_false')
    parser.set_defaults(include_scratchpad=False)
    return parser


def is_scratchpad_mark(mark: str) -> bool:
    return mark.startswith('_sp')


def is_scratchpad_container(container: i3ipc.Con) -> bool:
    return any(is_scratchpad_mark(m) for m in container.marks)


def is_floating(container):
    if container.type == 'floating_con':
        return True
    if not container.parent:
        return False
    return container.parent.type == 'floating_con'


def main():
    _init_logger(_logger)
    args = _create_args_parser().parse_args()
    _logger.setLevel(getattr(logging, args.log_level.upper()))
    i3_connection = i3ipc.Connection()
    tree = i3_connection.get_tree()
    for con in tree.leaves():
        if is_floating(con) and (not is_scratchpad_container(con) or
                                 args.include_scratchpad):
            _logger.info(
                f'Killing container: {getattr(con, "ipc_data").get("name")}')
            con.command('kill')


if __name__ == '__main__':
    main()
