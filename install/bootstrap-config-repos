#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

# TODO: Verify dependencies like ssh are installed and install them otherwise.

# NOTE: Consider using git dirs that are relative to this file so that this
# script can be run for working directories outside HOME.
readonly PUBLIC_CONFIG_GIT_DIR="${HOME}/.local/var/git_dirs/config-public"
readonly PRIVATE_CONFIG_GIT_DIR="${HOME}/.local/var/git_dirs/config-private"

readonly CONFIG_PRIVATE_REMOTE_URL='https://infokiller@gitlab.com/infokiller/config-private.git'
readonly CONFIG_PUBLIC_REMOTE_URL='https://infokiller@gitlab.com/infokiller/config-public.git'

print_error() {
  local error normal
  # Red color
  error="$(tput setaf 1 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf >&2 '%s\n' "${error}${*}${normal}"
}

_log_info() {
  printf 'bootstrap-config-repos: %s\n' "$*"
}

_log_error() {
  print_error "$(printf 'bootstrap-config-repos: %s' "$*")"
}

_log_warning() {
  print_warning "$(printf 'bootstrap-config-repos: %s' "$*")"
}

# NOTES:
# - `https://www.gitlab.com` is used instead of `https://gitlab.com` below so
#   that the automatic SSH conversion in my git config won't be applied, because
#   SSH keys are not available at this point.

_init_repo_in_existing_dir() {
  local git_dir="$1"
  local work_tree="$2"
  local remote_url="$3"
  local git=(git "--git-dir=${git_dir}" "--work-tree=${work_tree}")
  if [[ -d "${git_dir}" ]]; then
    _log_info 'Repo exists, not initializing it.'
    # Not sure why, but git can delete a lot of repo files after a hard reset
    # which is needed when the history changed, so we restore them.
    "${git[@]}" --no-pager diff --diff-filter=D --name-only --no-renames -z |
      xargs -0 -r "${git[@]}" checkout --
  else
    _log_info 'Repo not found, initializing it'
    mkdir -p -- "$(dirname "${work_tree}")"
    "${git[@]}" clone --bare "${remote_url}" "${git_dir}"
    "${git[@]}" init
    # Unstage all files. I'm not sure why, but after initializing the bare repo
    # git may have some files staged.
    "${git[@]}" reset --quiet
    # Restore files that are marked as deleted because they are in master but
    # were not in the directory before cloning the repo.
    "${git[@]}" --no-pager diff --diff-filter=D --name-only --no-renames -z |
      xargs -0 -r "${git[@]}" checkout --
  fi
  # Workaround to the remote not being set correctly.
  "${git[@]}" remote remove origin
  "${git[@]}" remote add origin "${remote_url}"
  "${git[@]}" fetch origin
  "${git[@]}" branch --set-upstream-to=origin/master master
}

_init_config_repos() {
  # TODO: Fix the private repo fsck issues.
  _log_info 'Checking if private config repo needs initialization'
  _init_repo_in_existing_dir "${PRIVATE_CONFIG_GIT_DIR}" "${HOME}" \
    "${CONFIG_PRIVATE_REMOTE_URL}"
  _log_info 'Checking if public config repo needs initialization'
  _init_repo_in_existing_dir "${PUBLIC_CONFIG_GIT_DIR}" "${HOME}" \
    "${CONFIG_PUBLIC_REMOTE_URL}"
  _log_info 'Setting public repo to primary'
  printf 'gitdir: %s\n' "${PUBLIC_CONFIG_GIT_DIR}" >| "${HOME}/.git"
}

main() {
  if (($# != 1)); then
    _log_error 'Must provide SSH key path'
    return 1
  fi
  local ssh_key=$1
  # Run the script from the repo root to have a consistent environment between
  # runs. I tried to make the code robust to running from other working
  # directories, but let's do this just in case I missed something.
  cd -- "${HOME}"
  # mkdir -p "${HOME}/.local/var/git_dirs/"
  git config --global --add credential.helper "cache --timeout=86400"
  _init_config_repos
  # Restore .profile that could have existed before cloning the repo, and wasn't
  # overridden by _init_repo_in_existing_dir. This is important to verify we
  # have the correct environment.
  git checkout -- .profile
  if [[ ! -r "${ssh_key}" ]]; then
    _log_error 'SSH key file does not exist'
    return 1
  fi
  eval "$(ssh-agent -s)"
  chmod 600 -- "${ssh_key}"
  ssh-add "${ssh_key}"
  echo 'Starting a new bash session with SSH agent set with the new key'
  bash
}

main "$@"
