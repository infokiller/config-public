#!/usr/bin/env python3

# TODO: Convert to a bash script to remove Python dependency (I don't gain much
# by using Python here). I can probably merge this file with
# ~/install/debian/configure-system and maybe
# ~/install/debian/install-external-packages.

import subprocess

import installation_util as util


def _install_debian_packages(packages):
    for apt_action in ['update', 'upgrade', 'autoclean']:
        subprocess.run(['sudo', 'apt-get', apt_action, '-y'], check=True)
    installed = []
    not_found = []
    chose_not_to_install = []
    for pkg in packages:
        # I previously used `dpkg-query -l {}` but there was a failure case in
        # my laptop where it showed a package that is not installed (cmake) as
        # being installed with version <none>.
        # Therefore, I switched to `dpkg-query -s`, which worked on that case as
        # well.
        # Update 2022-03-09: `dpkg-query -s` fails when the package is virtual
        # (such as ctags), so I switch to `dpkg-query --show`.
        # Note that I'm using capture_output but not actually doing anything
        # with the output. This is done to avoid cluttering the terminal with
        # the output of dpkg-query and apt-cache.
        # Update 2022-04-24: `dpkg-query --show` returned that python3-dev was
        # installed in an Ubuntu 20.04 VM, even though it was not.
        dpkg = subprocess.run(['dpkg-query', '--show',
                               '--showformat=${db:Status-Abbrev}',
                               '--',
                               pkg],
                              check=False,
                              capture_output=True)
        if dpkg.returncode == 0 and dpkg.stdout and dpkg.stdout.startswith(
                b'ii'):
            print(f'Package {pkg} is already installed')
            continue
        package_found = subprocess.run(['apt-cache', 'show', pkg],
                                       check=False,
                                       capture_output=True)
        if package_found.returncode == 0:
            installed_package = subprocess.run(
                ['sudo', 'apt-get', 'install', '-y', pkg], check=False)
            if installed_package.returncode == 0:
                installed.append(pkg)
            else:
                chose_not_to_install.append(pkg)
        else:
            not_found.append(pkg)
            print(util.yellow(f'Package {pkg} not found'))
    print('\n============ SUMMARY =============\n')
    print('Packages installed:\n' + '\n'.join(installed))
    print('\nPackages not found:\n' + '\n'.join(not_found))
    print('\nPackages chose not to install:\n' +
          '\n'.join(chose_not_to_install))


def main():
    packages = util.read_packages_file('debian/packages.txt')
    crossdistro_local_packages_deps = util.read_packages_file(
        'debian/crossdistro_local_packages_deps.txt')
    _install_debian_packages(packages + crossdistro_local_packages_deps)


if __name__ == '__main__':
    main()
