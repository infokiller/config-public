#!/usr/bin/env bash
#
# Installs user packages that common to all Linux distros I use.
#
# TODO: Switch to Nix/GUIX, or if I decide against it, use a task runner or
# build system.
# Features missing from this script:
# - Reproducible builds
# - Dependencies between tasks
#
# Also consider task runners and build systems (should have minimal deps):
#   - Makefile
#   - Bazel
#   - https://github.com/pydoit/doit
#   - http://www.pyinvoke.org
#   - https://github.com/stylemistake/runner

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

# shellcheck disable=SC2155
readonly REPO_ROOT="$([[ ${CONFIG_GET_ROOT:-0} == 1 ]] && config-repo-root "${BASH_SOURCE[0]}" || echo "${HOME}")"

# shellcheck source=../.my_scripts/lib/base.sh
source "${REPO_ROOT}/.my_scripts/lib/base.sh"
# shellcheck source=../.my_scripts/lib/platform_detection.sh
source "${REPO_ROOT}/.my_scripts/lib/platform_detection.sh"
# shellcheck source=./setup_installation_env
source "${REPO_ROOT}/install/setup_installation_env"

readonly SUBMODULES_DIR="${REPO_ROOT}/submodules"
readonly XDG_CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
readonly XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
# Compile go binaries statically
export CGO_ENABLED=0
# TODO: GOPATH can be colon separated like PATH and this should be handled.
readonly _GOLANG_TOOLS_MODULE_DIR="${GOPATH:-${HOME}/go}/tools"
readonly _GOLANG_BIN_DIR="${GOPATH:-${HOME}/go}/bin"
readonly -A _GOLANG_PACKAGES=(
  ['github.com/aykamko/tag']='tag'
  ['github.com/edi9999/path-extractor/path-extractor']='path-extractor'
  ['github.com/direnv/direnv/v2']='direnv'
  ['github.com/zricethezav/gitleaks/v8']='gitleaks'
  ['mvdan.cc/sh/v3/cmd/shfmt']='shfmt'
  ['golang.org/x/lint/golint']='golint'
  ['github.com/nektos/act']='act'
  ['github.com/bazelbuild/bazelisk']='bazelisk'
  ['github.com/bazelbuild/buildtools/buildifier']='buildifier'
  ['github.com/gopasspw/gopass@v1.13.0']='gopass'
  # As of 2021-10-30, installing vale fails with "module ... found ... but does
  # not contain package".
  # ['github.com/errata-ai/vale/v2']='vale'
)
# shellcheck disable=SC2034
readonly _VSCODE_EXTENSIONS=(
  ### General editing
  # Edit using local neovim server for full neovim editing capabilities
  'asvetliakov.vscode-neovim'
  'rlivings39.fzf-quick-open'
  'wayou.vscode-todo-highlight'
  'IgorSbitnev.error-gutters'
  'JoeBerria.statusbarerror'
  'VisualStudioExptTeam.vscodeintellicode'
  # TODO: Verify these extensions are useful and enable them.
  # 'streetsidesoftware.code-spell-checker'
  # 'kortina.run-in-terminal'
  # 'ryuta46.multi-command'
  # 'editorconfig.editorconfig'
  # 'eamodio.toggle-excluded-files'
  # 'pflannery.vscode-versionlens'
  ### Time tracking
  'lindraupe.aw-watcher-vscode'
  'WakaTime.vscode-wakatime'
  ### Git and github
  # https://github.com/chdsbd/vscode-githubinator
  'chdsbd.githubinator'
  'eamodio.gitlens'
  ### Remote dev
  'ms-vscode-remote.remote-ssh'
  'ms-vscode-remote.remote-ssh-edit'
  'ms-vscode-remote.remote-containers'
  ### Golang
  'golang.go'
  ### Python
  'ms-python.python'
  'ms-python.vscode-pylance'
  # As of 2021-06-22, VSCode complains that pylance includes pyright.
  # 'ms-pyright.pyright'
  ### Shell
  'mads-hartmann.bash-ide-vscode'
  'ms-vscode.PowerShell'
  ### Markdown
  'yzhang.markdown-all-in-one'
  'goessner.mdmath'
  # markdown-preview-enhanced looks powerful but it overlaps with the other
  # markdown extensions and has many open issues.
  # TODO: Figure out if I need markdown-preview-enhanced.
  # 'shd101wyy.markdown-preview-enhanced'
  'davidanson.vscode-markdownlint'
  'tchayen.markdown-links'
  'mushan.vscode-paste-image'
  # Preview images on hover
  'kisstkondoros.vscode-gutter-preview'
  # TODO: Test if I need one of these table formatting markdown extensions since
  # prettier and markdown-all-in-one already provide table formatting.
  # 'fcrespo82.markdown-table-formatter'
  # 'darkriszty.markdown-table-prettify'
  # 'dendron.dendron'
  # 'dendron.dendron-markdown-notes'
  # 'dendron.dendron-markdown-preview-enhanced'
  # 'dendron.dendron-paste-image'
  ### Web
  'dbaeumer.vscode-eslint'
  'esbenp.prettier-vscode'
  'stylelint.vscode-stylelint'
  # No support for extensions.
  # 'msjsdiag.debugger-for-chrome'
  ### Themes
  'github.github-vscode-theme'
  ### Docker/k8s
  # TODO: Review these extensions.
  # 'ms-kubernetes-tools.vscode-kubernetes-tools'
  # 'ms-azuretools.vscode-docker'
)
readonly _NERD_FONTS_DIRECTORY="${XDG_DATA_HOME}/fonts/NerdFonts"
readonly _PERSONAL_DEVICE_SYSTEMD_UNITS=(
  # 'syncthing.service'
  'keybase.service'
  'kbfs.service'
)
# shellcheck disable=SC2016
readonly -A _INSTALL_TASK_TO_CMD=(
  ['vim-plugins']='_install_vim_plugins'
  ['neovim-nightly']='_install_neovim_nightly'
  ['doom-emacs']='_install_doom_emacs'
  ['fzf']='_install_fzf'
  ['histcat']='_install_histcat'
  ['universal-ctags']='_install_universal_ctags'
  ['bfs']='(
    cd "${SUBMODULES_DIR}/terminal/bfs" && make release && symlink_binary bfs
  )'
  ['git-quick-stats']='(
    cd "${SUBMODULES_DIR}/terminal/git-quick-stats"
    symlink_binary git-quick-stats
    symlink_man_page git-quick-stats.1
  )'
  ['stderred']='(
    cd "${SUBMODULES_DIR}/terminal/stderred" && make
  )'
  ['device-services']='_configure_personal_device_services'
  ['golang-packages']='_install_golang_packages'
  ['python-packages-non-graphical']='
    "${REPO_ROOT}/install/install-python-packages" --non-graphical
  '
  ['python-packages-graphical']='
    "${REPO_ROOT}/install/install-python-packages" --graphical
  '
  ['npm-packages']="${REPO_ROOT}/install/install-npm-packages"
  ['cargo-packages']="_install_cargo_from_rustup && 
    ${REPO_ROOT}/install/install-cargo-packages"
  # Graphical tasks
  ['yank']='(
    cd "${SUBMODULES_DIR}/terminal/yank" && make && symlink_binary yank
  )'
  ['polybar']='_install_polybar'
  ['fonts']='_install_nerd_fonts'
  ['firenvim']='_install_firenvim'
  ['firefox-settings']='_install_firefox_settings'
  ['activitywatch']='_install_activitywatch_from_release'
  ['activitywatch-src']='_install_activitywatch_from_src'
  ['xkblayout-state']='(
    cd "${SUBMODULES_DIR}/desktop/xkblayout-state"
    make
    symlink_binary xkblayout-state
  )'
  ['vscode-extensions']='_install_vscode_extensions 0'
)
readonly -A _UPGRADE_TASK_TO_CMD=(
  ['submodules']="${REPO_ROOT}/.my_scripts/sysadmin/upgrade-submodules"
  ['npm-packages']="${REPO_ROOT}/install/install-npm-packages --upgrade"
  ['golang-packages']='_upgrade_golang_packages'
  ['python-packages-non-graphical']='_upgrade_non_graphical_python_envs'
  ['python-packages-graphical']='_upgrade_graphical_python_envs'
  ['vscode-extensions']='_install_vscode_extensions 1'
)
# Assoicative arrays don't maintain the order of the keys as specified, so we
# must use a separate array to control the order.
declare -g _ORDERED_INSTALL_TASKS=(
  'fzf'
  'histcat'
  'vim-plugins'
  # Use neovim nightly to avoid https://github.com/neovim/neovim/issues/8796
  # As of 2021-10-12, this is no longer needed because nvim 0.5.1 was released
  # on Archlinux.
  # 'neovim-nightly'
  'universal-ctags'
  'bfs'
  'git-quick-stats'
  'npm-packages'
  'golang-packages'
  'python-packages-non-graphical'
  'cargo-packages'
  'device-services'
  'stderred'
)
# TODO: Upgrade rust packages
# TODO: Upgrade golang packages that specify a specific branch/tag/commit
declare -g _ORDERED_UPGRADE_TASKS=(
  'submodules'
  'npm-packages'
  'golang-packages'
  'python-packages-non-graphical'
)
if uses_local_graphics; then
  _ORDERED_INSTALL_TASKS+=(
    'fonts'
    'xkblayout-state'
    'polybar'
    'doom-emacs'
    'vscode-extensions'
    'firenvim'
    'firefox-settings'
    'yank'
    'activitywatch'
    'python-packages-graphical'
  )
  _ORDERED_UPGRADE_TASKS+=(
    'python-packages-graphical'
    'vscode-extensions'
  )
fi

_print_usage_and_die() {
  local cmd_name
  cmd_name="$(basename "$0")"
  print_error "$(
    cat - << EOF
Usage: ${cmd_name} list (install | upgrade)
Usage: ${cmd_name} (install | upgrade) [--all] [--parallel] task+
EOF
  )"
  exit 1
}

_go_use_version_suffix() {
  # Starting from go 1.16, using a version suffix such as "@latest" makes the
  # install command ignore any go.mod files in the current directory or any
  # parent directory from being updated [1], which is useful for installing
  # executables without affecting the dependencies of the main module.
  # As of go 1.17 (released August 2021), installing executables with `go get`
  # is deprecated [2].
  # In older versions, GO111MODULE=off needs to be used.
  #
  # [1] https://golang.org/ref/mod#go-install
  # [2] https://golang.org/doc/go-get-install-deprecation
  local version minor
  version="$(go version | grep -E -o 'go[0-9]+\.[0-9]+(\.[0-9]+)?')"
  minor="$(echo "${version}" | cut -d . -f 2)"
  if ((minor >= 16)); then
    return 0
  fi
  return 1
}

_install_golang_packages() {
  # Switch to the module directory for the tools installed here.
  cd -- "${_GOLANG_TOOLS_MODULE_DIR}"
  for package in "${!_GOLANG_PACKAGES[@]}"; do
    local binary_name="${_GOLANG_PACKAGES["${package}"]}"
    print_bold "$(printf 'Installing %s (%s)' "${binary_name}" "${package}")"
    GO111MODULE=on go get -d "${package}"
    GO111MODULE=on go install -v "${package}"
    symlink_binary "${_GOLANG_BIN_DIR}/${binary_name}"
  done
}

_upgrade_golang_packages() {
  cd -- "${_GOLANG_TOOLS_MODULE_DIR}" || return 1
  rm go.{sum,mod} || true
  go mod init 'gitlab.com/infokiller/config-public/.local/pkg/go/tools'
  GO111MODULE=on go get -d "${!_GOLANG_PACKAGES[@]}"
}

# https://doc.rust-lang.org/cargo/getting-started/installation.html
_install_cargo_from_rustup() {
  curl -fsSL 'https://sh.rustup.rs' |
    sh -s -- --no-modify-path -y --profile minimal
  "${CARGO_BIN}/rustup" default stable
  symlink_binary "${CARGO_BIN}/rustup"
  symlink_binary "${CARGO_BIN}/cargo"
  local manpage
  while IFS= read -r -d '' manpage; do
    symlink_man_page "${manpage}"
  done < <(find "${RUSTUP_HOME}"/toolchains/stable-*/share/man/man1 \
    -mindepth 1 -maxdepth 1 -type f -print0)
}

_pip_compile_upgrade() {
  # https://github.com/jazzband/pip-tools/issues/1558
  pip install 'pip-tools>=6.5'
  pip-compile --generate-hashes --allow-unsafe --upgrade "$@"
}

# TODO: Upgrade "tools" environment
_upgrade_non_graphical_python_envs() {
  (
    cd -- "${REPO_ROOT}/.config/bash/history"
    # shellcheck disable=SC1091
    source activate shell_history
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/install/conda_envs/urlextract"
    # shellcheck disable=SC1091
    source activate urlextract
    _pip_compile_upgrade
  )
}

_upgrade_graphical_python_envs() {
  (
    cd -- "${SUBMODULES_DIR}/keydope"
    # shellcheck disable=SC1091
    source activate keydope
    # shellcheck disable=SC2119
    _pip_compile_upgrade
    _pip_compile_upgrade --extra dev --output-file requirements-dev.txt
    _pip_compile_upgrade --extra systemd --output-file requirements-systemd.txt
  )
  (
    cd -- "${SUBMODULES_DIR}/desktop/i3-workspace-groups"
    # shellcheck disable=SC1091
    source activate i3_workspace_groups
    _pip_compile_upgrade
    _pip_compile_upgrade --extra dev --output-file requirements-dev.txt
  )
  (
    cd -- "${SUBMODULES_DIR}/desktop/i3-scratchpad"
    # shellcheck disable=SC1091
    source activate i3_scratchpad
    _pip_compile_upgrade
    pip-compile --generate-hashes --allow-unsafe --upgrade
  )
  (
    cd -- "${REPO_ROOT}/.my_scripts/i3"
    # shellcheck disable=SC1091
    source activate i3_scripts
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/install/conda_envs/i3_resurrect"
    # shellcheck disable=SC1091
    source activate i3_resurrect
    _pip_compile_upgrade
  )
  (
    cd -- "${SUBMODULES_DIR}/desktop/selfspy"
    # shellcheck disable=SC1091
    source activate selfspy
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/.my_scripts/desktop_env/suspend-screenlock"
    # shellcheck disable=SC1091
    source activate suspend_screenlock
    _pip_compile_upgrade
  )
}

# TODO: Audit all python environments
cmd_audit() {
  snyk test "${SUBMODULES_DIR}/terminal/histcat"
  snyk code test "${SUBMODULES_DIR}/terminal/histcat"
  snyk test "${REPO_ROOT}/.local/pkg/npm"
  if ! uses_local_graphics; then
    return
  fi
  # shellcheck disable=SC1091
  source activate i3_scratchpad
  snyk test "${SUBMODULES_DIR}/desktop/i3-scratchpad"
  snyk code test "${SUBMODULES_DIR}/desktop/i3-scratchpad"
  # shellcheck disable=SC1091
  source activate i3_workspace_groups
  snyk test "${SUBMODULES_DIR}/desktop/i3-workspace-groups"
  snyk code test "${SUBMODULES_DIR}/desktop/i3-workspace-groups"
  # shellcheck disable=SC1091
  source activate selfspy
  snyk test "${SUBMODULES_DIR}/desktop/selfspy"
  snyk code test "${SUBMODULES_DIR}/desktop/selfspy"
  # shellcheck disable=SC1091
  source activate keydope
  snyk test "${SUBMODULES_DIR}/keydope"
  snyk code test "${SUBMODULES_DIR}/keydope"
}

_install_nerd_fonts() {
  cd "${INSTALLATION_TMP_DIR}"
  download_file \
    'https://gitlab.com/infokiller/fonts/-/archive/master/fonts-master.zip' \
    'fonts.zip'
  # Note that unzip is very picky about the order of options, so don't change it
  # without testing.
  unzip -oq 'fonts.zip' -d fonts
  mkdir -p -- "${_NERD_FONTS_DIRECTORY}"
  cp -rf fonts/fonts-master/* "${_NERD_FONTS_DIRECTORY}"
  # Refresh fontconfig cache
  fc-cache
}

_install_firefox_settings() {
  local FIREFOX_DIR="${HOME}/.mozilla/firefox"
  if [[ ! -d "${FIREFOX_DIR}" ]]; then
    print_warning 'Firefox data not found, skipping settings installation'
  fi
  cd "${INSTALLATION_TMP_DIR}"
  mkdir -p firefox && cd firefox
  download_file \
    'https://raw.githubusercontent.com/arkenfox/user.js/master/updater.sh'
  chmod +x 'updater.sh'
  [[ -d 'MaterialFox' ]] && rm -rf -- 'MaterialFox'
  git clone --depth 1 'https://github.com/muckSponge/MaterialFox'
  # Detect firefox profiles by the presence of the prefs.js file.
  # NOTE: there's also a ~/.mozilla/firefox/profiles.ini file, but I wasn't sure
  # if parsing it with regexes would be robust enough.
  local backup
  while IFS= read -r -d '' profile_dir; do
    [[ -f "${profile_dir}/prefs.js" ]] || continue
    local profile_name
    profile_name="$(basename "${profile_dir}")"
    print_bold "Firefox profile: ${profile_name}"
    if [[ "${profile_name}" != *default* ]]; then
      echo 'Skipping profile'
      continue
    fi
    # TODO: Use the cleanup script [1]. Currently it can't be used directly
    # because it doesn't support unattended invocations, and also always tries
    # to run from its own directory. I should submit PRs to fix this.
    # [1] https://github.com/arkenfox/user.js/blob/master/prefsCleaner.sh
    # NOTE: We back up the user.js file even though updater.sh does it too since
    # I'm not sure if I can rely on the latter to have consistent backup paths.
    echo 'Installing user.js'
    backup="${profile_dir}/backup_user.js"
    if [[ -f "${profile_dir}/user.js" ]]; then
      cp -rf -- "${profile_dir}/user.js" "${backup}"
    fi
    # -b: only keep one backup (I don't need backups but there's no option to
    #     disable them)
    # -s: don't ask for confirmation
    # -d: don't check for updates to the updater.sh script (I already download
    #     the latest version from Github).
    ./updater.sh -b -s -d -p "${profile_dir}" \
      -o "${REPO_ROOT}/.config/firefox/user-overrides.js"
    if [[ -f "${backup}" ]]; then
      sensible-diff "${backup}" "${profile_dir}/user.js" || true
    fi
    echo 'Installing MaterialFox'
    cp -rf -t "${profile_dir}" 'MaterialFox/chrome'
  done < <(\find "${FIREFOX_DIR}" -mindepth 1 -maxdepth 1 -type d -print0)
}

_build_polybar_direct() {
  local cmake_cmd=(
    cmake
    '-DENABLE_I3=ON'
    '-DENABLE_ALSA=ON'
    '-DENABLE_PULSEAUDIO=ON'
    '-DENABLE_NETWORK=ON'
    '-DENABLE_CURL=ON'
    '-DBUILD_POLYBAR_MSG=ON'
    '-DBUILD_DOC=OFF'
    '-DCMAKE_BUILD_TYPE=Release'
    "${SUBMODULES_DIR}/desktop/polybar"
  )
  # Try to do an incremental build, and only if it fails do a full build.
  local build_dir='build'
  if [[ ! -d "${build_dir}" ]]; then
    mkdir -p -- "${build_dir}"
    (cd -- "${build_dir}" && "${cmake_cmd[@]}" && make)
    symlink_binary "${build_dir}/bin/polybar"
    return
  fi
  if ! (cd -- "${build_dir}" && make); then
    print_bold 'Polybar build failed, rebuilding from scratch'
    (cd -- "${build_dir}" && "${cmake_cmd[@]}" && make)
  fi
  symlink_binary "${build_dir}/bin/polybar"
  symlink_binary "${build_dir}/bin/polybar-msg"
}

_install_polybar() {
  cd "${SUBMODULES_DIR}/desktop/polybar"
  git submodule update --init --recursive
  # NOTE: if the build gives me trouble in the future, I can try to switch to
  # the docker build below. The distadvantage of using the docker build is that
  # I'm copying the build executable to my Arch machine, and this may cause
  # library version mismatch at runtime. The better alternative is to use docker
  # to run Polybar too, but that requires installing fonts and mounting shell
  # scripts used in my polybar config for this to work properly.
  _build_polybar_direct
  # DOCKER_BUILDKIT=1 docker build . -t polybar --output "${USER_BIN_DIR}"
}

_install_universal_ctags() {
  cd "${SUBMODULES_DIR}/terminal/ctags"
  # Try to do an incremental build, and only if it fails do a full build.
  if [[ ! -f Makefile ]]; then
    ./autogen.sh && ./configure && make && cd man && make man
    return
  fi
  if ! make; then
    ./autogen.sh && ./configure && make && cd man && make man
  fi
  # As of 2021-11-16, the ctags build leaves these untracked files.
  git clean -f peg/thrift.{h,c}
  symlink_binary ctags
}

_install_activitywatch_from_release() {
  cd "${SUBMODULES_DIR}/desktop/activitywatch"
  local tag
  if ! tag="$(git describe --exact-match --abbrev=0)"; then
    print_error 'activitywatch submodule must point to a tag'
  fi
  local releases_base_url='https://github.com/ActivityWatch/activitywatch/releases/download'
  local filename="activitywatch-${tag}-linux-x86_64.zip"
  local url="${releases_base_url}/${tag}/${filename}"
  cd "${INSTALLATION_TMP_DIR}"
  echo 'Downloading activitywatch release archive...'
  wget -q --continue "${url}"
  # Note that unzip is very picky about the order of options, so don't change it
  # without testing.
  unzip -oq "${filename}"
  local dest_dir="${SUBMODULES_DIR}/desktop/activitywatch/dist"
  if [[ -d "${dest_dir}" ]]; then
    \rm -rf -- "${dest_dir}"
  fi
  mv -- "${INSTALLATION_TMP_DIR}/activitywatch" "${dest_dir}"
  # Fix issue with version 0.11 on archlinux:
  # https://github.com/ActivityWatch/activitywatch/issues/660#issuecomment-959889230
  if [[ "${DISTRO}" == arch && "${tag}" == v0.11.0 && -w "${dest_dir}/libharfbuzz.so.0" ]]; then
    rm -- "${dest_dir}/libharfbuzz.so.0"
  fi
}

# Building activitywatch from source was flaky a few times and I track the
# latest tags anyway, so I switched to downloading releases.
_install_activitywatch_from_src() {
  cd "${SUBMODULES_DIR}/desktop/activitywatch"
  git submodule update --init --recursive
  # activitywatch requires cargo nightly, see:
  # https://github.com/ActivityWatch/aw-server-rust/issues/116
  if ! [[ -f "${CARGO_BIN}/rustup" ]]; then
    curl -fsSL 'https://sh.rustup.rs' |
      sh -s -- --no-modify-path -y --profile minimal
  fi
  "${CARGO_BIN}/rustup" toolchain install nightly
  local nightly_toolchain
  nightly_toolchain="$("${CARGO_BIN}/rustup" toolchain list |
    grep --text '^nightly' | head -1 | awk '{print $1}')"
  local RUSTUP_HOME="${RUSTUP_HOME:-${HOME}/.rustup}"
  local nightly_rust_bin="${RUSTUP_HOME}/toolchains/${nightly_toolchain}/bin"
  # shellcheck source=../.local/bin/activate
  # shellcheck disable=SC2030
  (
    PATH="${nightly_rust_bin}:${PATH}"
    source activate activitywatch && make build
  )
  # activitywatch frequently has modified submodule commits and files after
  # installation, this should get rid of it.
  git submodule update --recursive
  git checkout -- .
  git submodule foreach --recursive git checkout -- .
}

_install_firenvim() {
  cd "${SUBMODULES_DIR}/vim/firenvim"
  # As of 2021-04-11 and firenvim v0.2.5, the build fails in Archlinux, but
  # it's not needed anyway, since I'm using the extension from the store. As
  # a more robust alternative, I implemented a Docker build:
  # https://github.com/glacambre/firenvim/pull/1014
  # npm install
  # npm run build
  # npm run install_manifests
  DOCKER_BUILDKIT=1 docker build . -t firenvim --output target
  nvim --headless -u NORC -i NONE -n \
    -c "set rtp+=${SUBMODULES_DIR}/vim/firenvim" \
    -c 'call firenvim#install(0) | q'
  cd "${REPO_ROOT}"
  git checkout -- "${XDG_DATA_HOME:-${HOME}/.local/share}/firenvim/"
}

# TODO: Pin VSCode extension dependencies. Listing the current versions:
# code --list-extensions --show-versions
_install_vscode_extensions() {
  local upgrade="${1:-0}"
  local cmd
  for extension in "${_VSCODE_EXTENSIONS[@]}"; do
    cmd=(code --install-extension "${extension}")
    if ((upgrade)); then
      # The `--force` argument updates the extension if there is a newer version.
      cmd+=(--force)
    fi
    "${cmd[@]}"
  done
  # Update 2021-09-11: neovim v0.5.0 was released so this is not needed.
  # print_bold 'Installating neovim nightly for vscode-neovim'
  # # vscode-neovim requires neovim nightly
  # # https://github.com/asvetliakov/vscode-neovim#installation
  # cd "${INSTALLATION_TMP_DIR}"
  # download_file 'https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage'
  # mv -f 'nvim.appimage' "${USER_BIN_DIR}/nvim-nightly"
  # chmod +x "${USER_BIN_DIR}/nvim-nightly"
}

_install_doom_emacs_once() {
  # * --no-env: don't generate an envvars file. I don't need it because doom
  #   should always start with the proper shell config.
  # * --no-config: don't create config files, they should already exist from my
  #   config repo.
  # * --no-hooks: don't deploy git hooks.
  doom --yes install --no-config --no-env --no-hooks
  # TODO: Verify if `doom upgrade` is needed when independently updating the
  # doom repo commit and if package versions are locked
  # NOTE: I used to execute `doom upgrade` (which calls `doom sync`) but I don't
  # think packages should be updated independently from the main repo.
  # * --packages: only upgrade packages, not doom itself. I update doom by using
  #   git-sensible-update, so I don't need to do it here.
  # * --force: discard local changes.
  # doom --yes upgrade --packages --force
  doom --yes sync -e
}

_install_doom_emacs() {
  if ! command_exists emacs; then
    print_warning 'Emacs not found, skipping doom-emacs installation'
    return
  fi
  # If install or upgrade fails, remove .local dir and try again
  _install_doom_emacs_once || {
    rm -rf -- "${SUBMODULES_DIR}/emacs/doom-emacs/.local"
    _install_doom_emacs_once
  }
}

_install_vim_plugins() {
  # print_bold 'Installing vim plugins'
  # NOTE: As of 2018-12-8 I'm managing all my plugins via submodules, so they
  # don't need to be installed with the exception of youcompleteme.
  # Note that we need to exit twice in the vim command: once from the vimplug
  # window and then from the new buffer.
  # vim -u "${REPO_ROOT}/.config/vim/vimrc" -c ":PlugInstall | q | q"
  print_bold 'Installing vim helptags'
  vim -u "${REPO_ROOT}/.config/vim/vimrc" -c 'call plug#helptags()' -c 'q'
  print_bold 'Installing YouCompleteMe'
  "${REPO_ROOT}/install/build-youcompleteme" \
    --build-dir "${XDG_CACHE_HOME}/ycm_build"
  print_bold 'Installing vim-go binaries'
  vim -u "${REPO_ROOT}/.config/vim/vimrc" -c 'GoInstallBinaries' -c 'q'
  print_bold 'Installing NeoVim remote plugins'
  nvim -u "${REPO_ROOT}/.config/vim/vimrc" -c 'UpdateRemotePlugins' -c 'q'
}

_install_neovim_nightly() {
  print_bold 'Installating neovim nightly'
  cd "${INSTALLATION_TMP_DIR}"
  download_file 'https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage'
  mv -f 'nvim.appimage' "${USER_BIN_DIR}/nvim-nightly"
  chmod +x "${USER_BIN_DIR}/nvim-nightly"
}

_install_fzf() {
  cd "${SUBMODULES_DIR}/terminal/fzf"
  make bin/fzf
  symlink_binary bin/fzf
  # go.mod might change
  git checkout -- .
  # I used to run the install scripts, but it downloads release binaries, and I
  # prefer to build from source, which is consistent with all the other go
  # programs here.
  # ./install --bin
}

_install_histcat() {
  cd "${SUBMODULES_DIR}/terminal/histcat"
  go build -v cmd/histcat/histcat.go
  symlink_binary histcat
}

_configure_personal_device_services() {
  if is_personal_device; then
    print_bold 'Looks like a personal device, enabling appropriate services'
    systemctl --user enable --now "${_PERSONAL_DEVICE_SYSTEMD_UNITS[@]}"
  else
    print_bold 'Looks like a shared device, disabling appropriate services'
    systemctl --user disable --now "${_PERSONAL_DEVICE_SYSTEMD_UNITS[@]}" || true
  fi
}

cmd_install() {
  (($# > 1)) || _print_usage_and_die
  local action="$1"
  shift
  local -n task_to_cmd ordered_tasks
  if [[ "${action}" == install ]]; then
    task_to_cmd=_INSTALL_TASK_TO_CMD
    ordered_tasks=_ORDERED_INSTALL_TASKS
  elif [[ "${action}" == upgrade ]]; then
    task_to_cmd=_UPGRADE_TASK_TO_CMD
    ordered_tasks=_ORDERED_UPGRADE_TASKS
  else
    _print_usage_and_die
  fi
  local tasks=()
  local all=0
  local parallel=0
  while (($# > 0)); do
    case "$1" in
      --all)
        tasks=("${ordered_tasks[@]}")
        all=1
        shift
        ;;
      --parallel)
        parallel=1
        shift
        ;;
      *)
        if [[ -z "${task_to_cmd[$1]-}" ]]; then
          print_error "Unknown task: '$1', available tasks:"
          printf '%s\n' "${ordered_tasks[@]}"
          exit 1
        fi
        if ((!all)); then
          tasks+=("$1")
        fi
        shift
        ;;
    esac
  done
  if ((parallel)); then
    # Upgrade submodules first because other updates may depend on it, for example
    # python environments upgrades are sometimes tied to a submodule.
    if [[ "${action}" == upgrade && " ${tasks[*]} " =~ " submodules " ]]; then
      "${REPO_ROOT}/.my_scripts/sysadmin/upgrade-submodules"
      for ((i = 0; i < ${#tasks[@]}; i++)); do
        if [[ "${tasks[${i}]}" == submodules ]]; then
          unset -v "tasks[${i}]"
        fi
      done
    fi
    printf '%s\n' "${tasks[@]}" | /usr/bin/parallel -j '50%' "$0" "${action}" {}
    return
  fi
  local durations=()
  for task in "${tasks[@]}"; do
    before=$(($(date +%s%N) / 1000000))
    print_bold "Running task: ${task}"
    eval "${task_to_cmd[${task}]}"
    after=$(($(date +%s%N) / 1000000))
    durations+=("$(echo "scale=2; (${after} - ${before})/1000" | bc)")
  done
  for ((i = 0; i < "${#tasks[@]}"; i++)); do
    print_bold "Task ${tasks[${i}]} finished in ${durations[${i}]} seconds"
  done
}

cmd_list() {
  if [[ ${1-install} == install ]]; then
    printf '%s\n' "${!_INSTALL_TASK_TO_CMD[@]}"
  elif [[ ${1-} == upgrade ]]; then
    printf '%s\n' "${!_UPGRADE_TASK_TO_CMD[@]}"
  else
    _print_usage_and_die
  fi
}

main() {
  do_basic_setup --no-sync-submodules
  if (($# == 0)); then
    cmd_install install --all --parallel
    return
  fi
  case "$1" in
    list)
      shift
      cmd_list "$@"
      ;;
    install | upgrade)
      cmd_install "$@"
      ;;
    audit)
      cmd_audit
      ;;
    *)
      _print_usage_and_die
      ;;
  esac
}

main "$@"
