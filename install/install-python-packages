#!/usr/bin/env bash

# TODO: Use a separate env for every tool (like pipx/pipz). I'll get that
# automatically if using https://github.com/AndydeCleyre/zpy
# pipz uses the built-in venv, which uses the python version it was run from, and
# doesn't support specifying an isolated python version. To pin the python
# version, I can use pipz with the python version from the tools env, which
# means all the tools will share the same python version. Alternatively, I can
# define several tools envs with different python versions (tools-venv-3.7,
# tools-venv-3.8, etc.) to support any python package. And also tools-conda-3.X
# for tools that can only be installed with conda.

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

# shellcheck disable=SC2155
readonly REPO_ROOT="$([[ ${CONFIG_GET_ROOT:-0} == 1 ]] && config-repo-root "${BASH_SOURCE[0]}" || echo "${HOME}")"
readonly SUBMODULES_DIR="${REPO_ROOT}/submodules"
readonly CONDA_LOCAL_DIR="${HOME}/.local/pkg/conda"
readonly CONDA="${CONDA_LOCAL_DIR}/bin/conda"
readonly MAMBA="${CONDA_LOCAL_DIR}/envs/mamba/bin/mamba"
# https://docs.conda.io/en/latest/miniconda.html#linux-installers
readonly MINICONDA_INSTALLER='Miniconda3-py311_23.5.2-0-Linux-x86_64.sh'
readonly MINICONDA_SHA256='634d76df5e489c44ade4085552b97bebc786d49245ed1a830022b0b406de5817' # pragma: allowlist secret

: "${CONDA_OPT:=mamba}"

# shellcheck source=../.my_scripts/lib/platform_detection.sh
source "${REPO_ROOT}/.my_scripts/lib/platform_detection.sh"
# shellcheck source=setup_installation_env
source "${REPO_ROOT}/install/setup_installation_env"

# shellcheck disable=SC2034
declare -A TOOLS_BINS=(
  ['buku']=''
  ['codespell']=''
  ['detect-secrets']=''
  ['detect-secrets-hook']=''
  # gh
  ['gitlab']=''
  # gitsome
  ['glances']=''
  ['gping']=''
  ['gpu']='gpu-cli'
  ['gpustat']=''
  ['grip']=''
  ['litecli']=''
  ['mansnip']=''
  ['pip']=''
  ['proselint']=''
  ['pydf']=''
  ['s-tui']=''
  ['semgrep']=''
  ['tmuxp']=''
  ['undervolt']=''
  ['vint']=''
)

# shellcheck disable=SC2034
declare -A TOOLS_DEV_BINS=(
  # ['black']=''
  ['git-nbdiffdriver']=''
  ['git-nbdifftool']=''
  ['git-nbmergedriver']=''
  ['git-nbmergetool']=''
  ['ipython']=''
  ['isort']=''
  ['jupyter']=''
  # ['jupyter-qtconsole']=''
  ['jupytext']=''
  ['nbdiff']=''
  ['nbdiff-web']=''
  ['nbdime']=''
  ['nbmerge']=''
  ['nbmerge-web']=''
  ['nbshow']=''
  ['pip']='pip-dev'
  # ['pipenv']=''
  # ['pipenv-resolver']=''
  # ['poetry']=''
  # ['py']=''
  ['py3']='pyflyby'
  ['tidy-imports']='pyflyby-tidy-imports'
  ['find-import']='pyflyby-find-imports'
  ['reformat-imports']='pyflyby-reformat-imports'
  ['semantic-release']='python-semantic-release'
  ['pylint']=''
  ['ruff']=''
  # ['pytype']=''
  ['twine']=''
  ['yapf']=''
)

# shellcheck disable=SC2034
declare -A TOOLS_CONDA_BINS=(
  ['conda-docker']=''
  ['conda-lock']=''
  ['conda-tree']=''
)

_print_bold() {
  local bold normal
  bold="$(tput bold 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf '%s' "${bold}"
  printf '%s' "${@}"
  printf '%s\n' "${normal}"
}

_log_info() {
  printf 'install-python-packages: %s\n' "$*"
}

_log_info_bold() {
  _print_bold "$(_log_info "$@")"
}

_print_warning() {
  local warning normal
  # Yellow color
  warning="$(tput setaf 3 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf >&2 '%s\n' "${warning}${*}${normal}"
}

_print_error() {
  local error normal
  # Red color
  error="$(tput setaf 1 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf >&2 '%s\n' "${error}${*}${normal}"
}

_log_warning() {
  _print_warning "$(printf 'bootstrap-config-repos: %s' "$*")"
}

_log_error() {
  _print_error "$(printf 'install-python-packages: %s' "$*")"
}

_print_usage_and_die() {
  _print_error "$(printf 'Usage: %s [--graphical] [--non-graphical]' \
    "$(basename "$0")")"
  exit 1
}

# Returns 0 if the conda args are relevant for the --solver arg.
_is_solver_cmd() {
  while (($# > 0)); do
    case "$1" in
      -*)
        shift
        ;;
      config | info | clean | compare | search | notices | package | list | init)
        return 1
        ;;
      create | install | update | remove)
        return 0
        ;;
      env)
        shift
        if [[ ${1-} =~ ^(create|install|update|upgrade|remove|uninstall)$ ]]; then
          return 0
        fi
        return 1
        ;;
      *)
        _log_warning "Unknown conda command: $1"
        return 1
        ;;
    esac
  done
  return 1
}

# As of 2020-10-14, mamba wasn't faster than conda in this script, though I
# think it's faster when installing envrionments from scratch. I'll consider
# enabling it in the future.
# As of 2021-10-16, mamba was faster: 1 minute vs 3.5 minutes. However,
# it doesn't seem idempotent with conda, so the first time switching between
# them will take longer.
# As of 2021-11-05, I ran into the following issues with mamba:
# - It doesn't register an environment when conda when installing it with
#   `mamba update` since it sometimes installs it to the tools environment
#   (which is where mamba is installed).
# - It doesn't install new conda dependencies in existing environments
# As of 2023-05-17, mamba is still much faster: 4m vs 14m for installing all
# envs (both graphical and non-graphical). Using conda with --solver=libmamba
# [1] is much faster than "vanilla" conda, but it's still about 10% slower than
# mamba.
# [1] https://www.anaconda.com/blog/conda-is-fast-now
_conda() {
  if ! [[ "${CONDA_OPT}" =~ ^(conda|mamba|libmamba)$ ]]; then
    _print_error 'CONDA_OPT var must be one of: conda, mamba, libmamba'
    _print_usage_and_die
  fi
  local bin="${CONDA}"
  local args=("$@")
  if [[ "${CONDA_OPT}" = libmamba ]] && _is_solver_cmd "$@"; then
    args+=('--solver=libmamba')
  elif [[ "${CONDA_OPT}" = mamba ]] && [[ -x "${MAMBA}" ]]; then
    bin="${MAMBA}"
  fi
  "${bin}" "${args[@]}"
}

_create_python_env_wrappers() {
  # Source profile again to make sure create-wrappers is in the PATH.
  # shellcheck source=../.profile
  source "${REPO_ROOT}/.profile"

  # NOTE: As of 2018-11-25 I'm using the conda-run script instead of generating
  # wrappers.
  _log_info_bold "Installing conda exec-wrappers"
  pip install exec-wrappers
  # cd "${SUBMODULES_DIR}/exec-wrappers"
  # "${HOME}/.local/pkg/conda/bin/python" setup.py install
  _log_info_bold 'Creating python environment wrappers'
  # local envs=(i3_scripts shell_history)
  # local bin_dirs=("${HOME}/.my_scripts/i3" "${HOME}/.config/bash/history")
  local envs=()
  local bin_dirs=()
  for i in "${!envs[@]}"; do
    local dest_dir="${bin_dirs[${i}]}/wrappers"
    [[ -d ${dest_dir} ]] || mkdir -- "${dest_dir}"
    "${CONDA_LOCAL_DIR}/envs/tools-dev/bin/create-wrappers" --type conda \
      --conda-env-dir "${CONDA_LOCAL_DIR}/envs/${envs[${i}]}" \
      --bin-dir "${bin_dirs[${i}]}" \
      --dest-dir "${dest_dir}"
  done
}

_install_miniconda() {
  # TODO: Install man pages. I need to clone:
  # https://github.com/conda/conda-docs
  # And then build the man files and link them to my path.
  if [[ -d ${CONDA_LOCAL_DIR} ]]; then
    _log_info_bold 'Looks like miniconda is already installed'
    return
  fi
  _log_info_bold 'Installing miniconda'
  cd -- "${INSTALLATION_TMP_DIR}"
  wget --continue "https://repo.continuum.io/miniconda/${MINICONDA_INSTALLER}"
  if ! sha256sum --status --check - <<< "${MINICONDA_SHA256} ${MINICONDA_INSTALLER}"; then
    _log_error 'Miniconda installer sha256 check failed'
    return 1
  fi
  bash "${MINICONDA_INSTALLER}" -b -p "${CONDA_LOCAL_DIR}"
}

_install_conda_env() {
  local file="${1:-environment.yml}"
  # Some conda environment files install pip dependencies from a
  # requirements.txt file. It seems that in this case we must resolve symlinks
  # for this to work so that the requirements.txt file can be found by conda.
  file="$(readlink -f -- "${file}")"
  local dir
  dir="$(dirname -- "${file}")"
  # Workaround for mamba sometimes installing stuff with the wrong prefix
  local env_name
  env_name="$(grep -E '^\s*name: [a-zA-Z_][a-zA-Z0-9_-]*' -- "${file}" |
    sed -E 's/^\s*name:\s*//')"
  local py_version
  py_version="$(grep -E '^\s*-\s*python\s*=\s*[0-9]\.[0-9]+' -- "${file}" |
    sed -E 's/^\s*-\s*python\s*=\s*([0-9]\.[0-9]+)/\1/')"
  # NOTE: We must use the full env prefix (instead of just name) for these
  # commands to work in mamba as well.
  local env_prefix="${CONDA_LOCAL_DIR}/envs/${env_name}"
  local py_bin="${env_prefix}/bin/python"
  if [[ -x "${py_bin}" ]]; then
    local current_py_version=''
    current_py_version="$("${py_bin}" -c \
      'import sys; v = sys.version_info[:2]; print(f"{v[0]}.{v[1]}")')" || true
    # When the env file specifies a python version that is different from the
    # one already installed in that env, it seems `conda env update` can either
    # fail or leave an environment in an inconsistent state (some libraries
    # using the first python version, some the second). Therefore, if we detect
    # a different python version, we remove the env.
    if [[ "${py_version}" != "${current_py_version}" ]]; then
      _log_info "Env ${env_name} wants python ${py_version}, " \
        "but currently has ${current_py_version} installed"
      _log_info_bold "Removing environment ${env_name}"
      _conda env remove --name "${env_name}" || true
      rm -rf -- "${env_prefix}" 2> /dev/null || true
    fi
  fi
  if [[ -e "${env_prefix}" ]]; then
    _log_info_bold "Updating conda environment ${env_name} from ${file}"
    # --prune should remove packages not specified in environment file, though
    # it's broken as of 2020-11-02: https://github.com/conda/conda/issues/7279
    # One workaround is to run `conda env create --force` which will re-create
    # the environment from scratch.
    local cmd=(_conda env update --prune -p "${env_prefix}" -f "${file}")
  else
    _log_info_bold "Installing conda environment ${env_name} from ${file}"
    local cmd=(_conda env create -p "${env_prefix}" -f "${file}")
  fi
  (
    cd -- "${dir}"
    if ! "${cmd[@]}"; then
      _log_info_bold 'Removing compiler_compat/ld and retrying'
      rm -- "${CONDA_LOCAL_DIR}/compiler_compat/ld" \
        "${CONDA_LOCAL_DIR}"/envs/*/compiler_compat/ld &> /dev/null || true
      "${cmd[@]}"
    fi
  )
}

_install_conda_envs_from_dir() {
  local dir="$1"
  while IFS= read -r -d '' file; do
    _install_conda_env "${file}"
  done < <(\find -L "${dir}" -maxdepth 1 -type f -print0 | sort --zero-terminated)
}

_install_non_graphical_envs() {
  _log_info_bold 'Installing non-graphical conda environments'
  _install_conda_env "${REPO_ROOT}/install/conda_envs/tools/environment.yml"
  _symlink_tools_binaries tools TOOLS_BINS
  _install_conda_env "${REPO_ROOT}/install/conda_envs/tools-dev/environment.yml"
  _symlink_tools_binaries tools-dev TOOLS_DEV_BINS
  _install_conda_env "${REPO_ROOT}/install/conda_envs/tools-conda/environment.yml"
  _symlink_tools_binaries tools-conda TOOLS_CONDA_BINS
  _install_conda_env "${REPO_ROOT}/install/conda_envs/urlextract/urlextract.yml"
  _install_conda_env "${REPO_ROOT}/.config/bash/history/environment.yml"
}

_install_graphical_envs() {
  _log_info_bold 'Installing graphical conda environments'
  _install_conda_env "${SUBMODULES_DIR}/keydope/environment.yml"
  _install_conda_env "${SUBMODULES_DIR}/desktop/i3-workspace-groups/environment.yml"
  _install_conda_env "${SUBMODULES_DIR}/desktop/i3-scratchpad/environment.yml"
  _install_conda_env "${REPO_ROOT}/.my_scripts/i3/environment.yml"
  _install_conda_env "${REPO_ROOT}/install/conda_envs/i3_resurrect/i3_resurrect.yml"
  _install_conda_env "${SUBMODULES_DIR}/desktop/selfspy/environment.yml"
  _install_conda_env "${REPO_ROOT}/.my_scripts/desktop_env/suspend-screenlock/environment.yml"
  _install_conda_env "${REPO_ROOT}/install/conda_envs/activitywatch.yml"
  _install_conda_env "${SUBMODULES_DIR}/desktop/promnesia/environment.yml"
}

_pip_compile_upgrade() {
  # https://github.com/jazzband/pip-tools/issues/1558
  # 6.6.2: https://github.com/jazzband/pip-tools/issues/1617
  # 6.13.0: https://github.com/jazzband/pip-tools/releases/tag/6.13.0
  pip install 'pip-tools>=7.3'
  # As of pip-tools 7.0, --resolver=backtracking is already the default
  # Starting from 8.0, --strip-extras and --allow-unsafe should be the default, and then
  # we can remove them.
  local compile=(pip-compile --strip-extras --quiet --generate-hashes --allow-unsafe --upgrade)
  local sync_cmd=(pip-sync requirements.txt)
  "${compile[@]}"
  local req_name extra_args
  for extra in "$@"; do
    req_name="requirements-${extra}"
    if [[ -f "${req_name}.in" ]]; then
      extra_args=("${req_name}.in")
    else
      extra_args=(--extra "${extra}" --output-file "${req_name}.txt")
    fi
    "${compile[@]}" "${extra_args[@]}"
    sync_cmd+=("${req_name}.txt")
  done
  "${sync_cmd[@]}"
}

_upgrade_non_graphical_envs() {
  (
    cd -- "${REPO_ROOT}/install/conda_envs/tools"
    # shellcheck disable=SC1091
    source activate tools
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/install/conda_envs/tools-dev"
    # shellcheck disable=SC1091
    source activate tools-dev
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/install/conda_envs/urlextract"
    # shellcheck disable=SC1091
    source activate urlextract
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/.config/bash/history"
    # shellcheck disable=SC1091
    source activate shell_history
    _pip_compile_upgrade
  )
}

_upgrade_graphical_envs() {
  (
    cd -- "${SUBMODULES_DIR}/keydope"
    # shellcheck disable=SC1091
    source activate keydope
    # shellcheck disable=SC2119
    _pip_compile_upgrade dev systemd
  )
  (
    cd -- "${SUBMODULES_DIR}/desktop/i3-workspace-groups"
    # shellcheck disable=SC1091
    source activate i3_workspace_groups
    _pip_compile_upgrade dev
  )
  (
    cd -- "${SUBMODULES_DIR}/desktop/i3-scratchpad"
    # shellcheck disable=SC1091
    source activate i3_scratchpad
    _pip_compile_upgrade dev
  )
  (
    cd -- "${REPO_ROOT}/.my_scripts/i3"
    # shellcheck disable=SC1091
    source activate i3_scripts
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/install/conda_envs/i3_resurrect"
    # shellcheck disable=SC1091
    source activate i3_resurrect
    _pip_compile_upgrade
  )
  (
    cd -- "${SUBMODULES_DIR}/desktop/selfspy"
    # shellcheck disable=SC1091
    source activate selfspy
    _pip_compile_upgrade
  )
  (
    cd -- "${REPO_ROOT}/.my_scripts/desktop_env/suspend-screenlock"
    # shellcheck disable=SC1091
    source activate suspend_screenlock
    _pip_compile_upgrade
  )
}

_setup_conda() {
  # shellcheck disable=SC2119
  do_basic_setup
  _install_miniconda
  # Source profile again to get the conda bin path.
  # shellcheck source=../.profile
  source "${REPO_ROOT}/.profile"
  _log_info_bold 'Updating conda'
  # NOTE: we must specify the environment in case another environment is active
  # when this script is called.
  # NOTE: if conda-build is not installed, updating conda will fail.
  # NOTE: using --override-channels is required to avoid errors when packages
  # were already installed from another channel like conda-forge.
  local base_flags=(--name base --channel defaults --override-channels --yes)
  "${CONDA}" install "${base_flags[@]}" conda-build
  "${CONDA}" update "${base_flags[@]}" conda
  if [[ "${CONDA_OPT}" == libmamba ]]; then
    "${CONDA}" install "${base_flags[@]}" conda-libmamba-solver
  fi
  if [[ "${CONDA_OPT}" == mamba ]]; then
    CONDA_OPT=conda _install_conda_env "${REPO_ROOT}/install/conda_envs/mamba.yml"
    symlink_binary "${MAMBA}"
    # local mamba_flags=(--name mamba --channel conda-forge --override-channel --yes)
    # conda create "${mamba_flags[@]}" python=3.8 mamba
  fi
  _log_info_bold 'Removing compiler_compat/ld'
  rm "${CONDA_LOCAL_DIR}/compiler_compat/ld" \
    "${CONDA_LOCAL_DIR}"/envs/*/compiler_compat/ld &> /dev/null || true
}

_symlink_tools_binaries() {
  local env="$1"
  # -n specifies a reference variable
  local -n bins_var="$2"
  _log_info_bold "Symlinking binaries from conda environment: ${env}"
  local bin_dir="${CONDA_LOCAL_DIR}/envs/${env}/bin"
  local bin install_name
  for bin in "${!bins_var[@]}"; do
    if [[ -n "${bins_var[${bin}]}" ]]; then
      install_name="${bins_var[${bin}]}"
      _log_info "Installing ${bin} as ${install_name}"
    else
      install_name="${bin}"
      _log_info "Installing ${bin}"
    fi
    symlink_binary "${bin_dir}/${bin}" "${install_name}"
  done
}

main() {
  local non_graphical=0
  local graphical=0
  local upgrade=0
  if (($# == 0)); then
    non_graphical=1
    graphical=1
  fi
  while (($# > 0)); do
    case "$1" in
      --non-graphical)
        non_graphical=1
        shift 1
        ;;
      --graphical)
        graphical=1
        shift 1
        ;;
      --upgrade)
        upgrade=1
        shift 1
        ;;
      *)
        _print_usage_and_die
        ;;
    esac
  done

  if ((upgrade)); then
    if ((non_graphical)); then
      _upgrade_non_graphical_envs
    fi
    if ((graphical)); then
      _upgrade_graphical_envs
    fi
  else
    _setup_conda
    for base_tool in conda activate deactivate; do
      symlink_binary "${CONDA_LOCAL_DIR}/bin/${base_tool}" "${base_tool}"
    done
    if ((non_graphical)); then
      _install_non_graphical_envs
    fi
    if ((graphical)); then
      _install_graphical_envs
    fi
  fi
}

main "$@"
