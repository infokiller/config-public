#!/usr/bin/env python3
import os
import re
import subprocess
# pylint: disable=unused-import
from typing import Dict, List, Optional

import installation_util as util

# TODO: Lock the versions of installed packages similarly to
# `install-npm-packages` so that the build is fully reproducible.
# TODO: Install man pages and shell completions (for example the watchexec
# package has them).

CARGO_BIN_DIR = os.path.expanduser('~/.local/pkg/cargo/bin')
CARGO = os.path.join(CARGO_BIN_DIR, 'cargo')


class PackageInstallSpec:

    # pylint: disable=too-many-arguments
    def __init__(self,
                 name,
                 version=None,
                 installed_binaries=None,
                 install_flags=None,
                 distro_regex=''):
        self.name = name
        self.version = version
        self.installed_binaries = installed_binaries
        if not install_flags:
            install_flags = ['--locked', '--all-features']
        self.install_flags = install_flags
        self.distro_regex = re.compile(distro_regex)

    def __str__(self):
        result = self.name
        opt_parts = []
        if self.version:
            opt_parts.append(self.version)
        if self.installed_binaries:
            opt_parts.append(self.installed_binaries)
        if self.install_flags:
            opt_parts.append(self.install_flags)
        if self.distro_regex:
            opt_parts.append(self.distro_regex)
        if opt_parts:
            result += f' ({", ".join(str(p) for p in opt_parts)})'
        return result

    @property
    def install_cmd(self):
        cmd = [CARGO, 'install'] + self.install_flags
        if self.version:
            cmd += ['--version', self.version]
        return cmd + [self.name]


PACKAGES = [
    # As of 2021-05-29, cargo-update is no longer needed, see comments at the
    # bottom of this file.
    # PackageInstallSpec('cargo-update', installed_binaries={}),
    # As of 2020-08-30, this is disabled because it had some issues compared to
    # GNU parallel.
    # PackageInstallSpec('parallel'),
    PackageInstallSpec('tokei'),
    PackageInstallSpec('watchexec-cli',
                       installed_binaries={'watchexec': 'watchexec'}),
    PackageInstallSpec('hyperfine'),
    # As of 2021-05-29, functiontrace-server has a build issue and is not really
    # used.
    # PackageInstallSpec('functiontrace-server'),
    PackageInstallSpec('git-delta',
                       installed_binaries={'delta': 'delta'}),
    # NOTE(2018-07-21): exa is now installed from the arch repos for Arch.
    # --git https://github.com/ogham/exa
    # NOTE(2018-07-21): ripgrep is now installed from the arch repos for Arch.
    PackageInstallSpec('exa', distro_regex='debian|ubuntu'),
    PackageInstallSpec('ripgrep',
                       installed_binaries={'rg': 'rg'},
                       distro_regex='debian|ubuntu',
                       install_flags=['--locked']),
    PackageInstallSpec('bat', distro_regex='debian|ubuntu'),
]


def _install_cargo_packages(packages: List[PackageInstallSpec]) -> None:
    installed = []
    errors = []
    distro = util.get_linux_distro()
    binary_to_install_name = {}
    for pkg in packages:
        if not re.match(pkg.distro_regex, distro):
            util.log_info(
                f'Package {pkg.name} not needed in current distro, skipping')
            continue
        if pkg.installed_binaries is None:
            binary_to_install_name[pkg.name] = pkg.name
        else:
            for binary_name, installed_name in pkg.installed_binaries.items():
                binary_to_install_name[binary_name] = installed_name
        is_installed = os.system(
            f'{CARGO} install --list | grep -q {pkg.name}') == 0
        # It seems that cargo sometimes rebuild packages even if they're already
        # installed, presumably because the build configuration changed
        # (toolchain, features, etc.). `cargo install` will also update packages
        # if they're out of date. This is probably what I want, so I'm running
        # `cargo install` even if it's already installed.
        # if is_installed:
        #     util.log_info(f'Package {pkg.name} already installed, skipping')
        #     continue
        try:
            subprocess.run(pkg.install_cmd, check=True)
        except subprocess.CalledProcessError:
            errors.append(pkg)
            util.log_warning(f'Failed installing package {pkg}')
            continue
        if not is_installed:
            installed.append(pkg)
    for binary_name, installed_name in binary_to_install_name.items():
        util.log_info(f'Symlinking binary {binary_name}')
        util.symlink_relative(os.path.join(CARGO_BIN_DIR, binary_name),
                              os.path.join(util.USER_BIN_DIR, installed_name))
    util.log_bold('Packages installed:\n{}'.format('\n'.join(
        p.name for p in installed)))
    if errors:
        util.log_warning('Packages with errors:\n{}\n'.format('\n'.join(
            p.name for p in errors)))


def main():
    util.log_name = 'install-cargo-packages'
    util.create_user_dirs()
    _install_cargo_packages(PACKAGES)
    # Before PR [1] (merged in Nov 2019), Cargo didn't support directly updating
    # a package [2] - it required uninstalling and reinstalling a package. Since
    # then, it will automatically upgrade the package if a new version is
    # available.  The `install-update` command is an extension subcommand
    # provided by [3].
    # [1] https://github.com/rust-lang/cargo/pull/7560
    # [2] https://github.com/rust-lang/cargo/issues/2082
    # [3] https://github.com/nabijaczleweli/cargo-update
    # if args.upgrade:
    #     subprocess.run(f'{CARGO} install-update -a'.split(), check=True)
    subprocess.run('bat cache --build'.split(), check=True)


if __name__ == '__main__':
    main()
