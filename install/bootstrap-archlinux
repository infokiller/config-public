#!/usr/bin/env bash
#
# This script is intended to do the most basic system setup from a Linux
# distribution ISO. It is may be too tailored for Arch Linux, which is what I
# targeted when writing this script.

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail
# Print every command executed.
set -x

DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

_print_error() {
  printf >&2 '%s\n' "$*"
}

_disk_by_id() {
  readlink -f "/dev/disk/by-id/$1"
}

while (($# > 0)); do
  arg="$1"
  case ${arg} in
    --machine-name)
      machine_name="$2"
      shift 2
      ;;
    *)
      _print_error "Usage: $0 --machine-name <name>"
      exit 1
      ;;
  esac
done

if [[ -z "${machine_name-}" ]]; then
  _print_error "you must choose a machine name"
  exit 1
fi

# NOTE: target_disk will be completely nuked.

# Configurable vars.
uefi=1
btrfs=0
dev_name=''

# Swap sizing: https://superuser.com/q/777907/407543
case "${machine_name}" in
  zeus18)
    # dev_name='s960evo'
    dev_name='s980pro'
    btrfs=1
    target_disk="$(_disk_by_id nvme-Samsung_SSD_980_PRO_1TB_S5P2NU0W101737F)"
    efi_part="${target_disk}"p1
    # boot_part="${target_disk}"p2
    encrypted_part="${target_disk}"p2
    swap_size=8G
    root_size=75G
    # TODO: remove these comments
    # # EFI_PARTITION_END=$((1+512+64))
    # # BOOT_PARTITION_END=$((EFI_PARTITION_END+512))
    # # parted --script "${target_disk}" mkpart primary "${EFI_PARTITION_END}"MiB "${BOOT_PARTITION_END}"MiB

    # EFI_PARTITION_END=$((1+1024))
    # parted --script "${target_disk}" mklabel gpt
    # parted --script "${target_disk}" mkpart primary fat32 1MiB "${EFI_PARTITION_END}"MiB
    # parted --script "${target_disk}" set 1 boot on
    # parted --script "${target_disk}" set 1 esp on
    # parted "${target_disk}" mkpart primary "${EFI_PARTITION_END}"MiB 100%
    ;;
  hera17)
    target_disk=/dev/nvme0n1
    efi_part="${target_disk}"p1
    boot_part="${target_disk}"p5
    encrypted_part="${target_disk}"p6
    swap_size=8G
    root_size=25G
    # parted "${target_disk}" mkpart primary 159625216s 160444415s
    # parted "${target_disk}" mkpart primary 160444416s 317730815s
    ;;
  hera20-juno)
    target_disk="$(_disk_by_id nvme-SAMSUNG_MZVLB1T0HALR-000L7_S3TPNX0M715600)"
    efi_part="${target_disk}"p2
    boot_part="${target_disk}"p6
    encrypted_part="${target_disk}"p7
    swap_size=8G
    root_size=100G
    # parted "${target_disk}" mkpart primary 631455744s 632504319s
    # parted "${target_disk}" mkpart primary 632504320s 1999044607s
    ;;
  zeus20-juno)
    target_disk=/dev/nvme0n1
    efi_part="${target_disk}"p1
    boot_part="${target_disk}"p2
    encrypted_part="${target_disk}"p3
    swap_size=8G
    root_size=100G
    # parted "${target_disk}" mkpart primary 1MiB 751MiB
    # parted "${target_disk}" mkpart primary 751MiB 1501MiB
    ;;
  vbox_uefi)
    # This is what I used for a single boot Linux installation from scratch
    # (tested on VirtualBox):
    target_disk=/dev/sda
    efi_part="${target_disk}"1
    boot_part="${target_disk}"2
    encrypted_part="${target_disk}"3
    swap_size=4G
    root_size=20G
    # Now partition the target disk:
    # Partition the disk with GPT. 3 partitions are defined:
    # - sda1: EFI System Partition, will be mounted on /boot/efi
    # - sda2: Boot partition, will be mounted on /boot
    # - sda3: LVM on LUKS partition that includes volumes for root, home, and swap.
    # EFI_PARTITION_END=513MiB
    # BOOT_PARTITION_END=1024MiB
    # parted --script "${target_disk}" mklabel gpt
    # parted --script "${target_disk}" mkpart primary fat32 1MiB "${EFI_PARTITION_END}"
    # parted --script "${target_disk}" set 1 boot on
    # parted --script "${target_disk}" set 1 esp on
    # parted --script "${target_disk}" mkpart primary "${EFI_PARTITION_END}" "${BOOT_PARTITION_END}"
    ;;
  hera11)
    uefi=0
    # This is what I used for a dual boot Linux installation on hera11:
    target_disk=/dev/sda
    encrypted_part="${target_disk}"5
    swap_size=12G
    root_size=25G
    ;;
  *)
    printf >&2 'Unknown machine: %s\n' "${machine_name}"
    exit 1
    ;;
esac

# Ensure the system clock is accurate.
timedatectl set-ntp true

# Create encrypted partition containing root, home, etc.
luks_dev_name='luks'
if [[ -n "${dev_name-}" ]]; then
  luks_dev_name="${dev_name}-${luks_dev_name}"
fi
luks_dev_path="/dev/mapper/${luks_dev_name}"
cryptsetup luksFormat --type luks2 --pbkdf argon2id "${encrypted_part}"
cryptsetup luksOpen "${encrypted_part}" "${luks_dev_name}"
# Btrfs/LVM setup
if ((btrfs)); then
  mkfs.btrfs -L "${dev_name}-btrfs" "${luks_dev_path}"
  mnt="/mnt/${luks_dev_name}-btrfs"
  mkdir -p -- "${mnt}"
  mount "${luks_dev_path}" "${mnt}"
  # TODO: add a nested <USER>-cache subvolume for each user and mount it in the user's
  # XDG_CONFIG_CACHE directory so that it won't be included in snapshots.
  for subvol in root home pkgs docker logs tmp swap snapshots; do
    # NOTE: The at symbol (@) is a common convention for subvolume names. It's
    # useful to be able to distinguish between directories and subvolumes.
    btrfs subvolume create "${mnt}/@${subvol}"
  done
  umount "${mnt}"

  mnt_btrfs_subvol() {
    (($# == 2)) || {
      printf >&2 'Usage: %s subvol_name' "${FUNCNAME[0]}"
      return 1
    }
    local subvol="$1"
    local subdir="$2"
    echo "Mounting subvolume $subvol"
    mkdir -p -- "${mnt}/${subdir}"
    local files
    mapfile -t -d '' files < <(find "${mnt}/${subdir}" -mindepth 1 -maxdepth 1 -print0)
    ((${#files[@]} == 0)) || {
      printf >&2 'Directory %s is not empty (%s files)' "${mnt}/${subdir}" "${#files[@]}"
      return 1
    }
    mount -o noatime,nodiratime,compress=zstd,subvol="${subvol}" "${luks_dev_path}" "${mnt}/${subdir}"
  }
  # For info about subvolumes and typical layouts, see:
  # - https://btrfs.readthedocs.io/en/latest/Subvolumes.html#nested-subvolumes
  # - https://fedoramagazine.org/working-with-btrfs-subvolumes/
  # - https://github.com/maximbaz/dotfiles/blob/6904407aac6e7dbebdd4575da2a46cea17dfd5c6/install.sh#L134
  mnt_btrfs_subvol @root ''
  mnt_btrfs_subvol / btrfs-root
  mnt_btrfs_subvol @home home
  mnt_btrfs_subvol @pkgs var/cache/pacman
  mnt_btrfs_subvol @docker var/lib/docker
  mnt_btrfs_subvol @logs var/log
  mnt_btrfs_subvol @snapshots .snapshots
  mnt_btrfs_subvol @swap swap
  btrfs filesystem mkswapfile --size "${swap_size}" "${mnt}/swap/swapfile"
  swap_dev='/swap/swapfile'
else
  mnt="/mnt/${luks_dev_name}-lvm"
  mkdir -p -- "${mnt}"
  pvcreate "${luks_dev_path}"
  vg='vg'
  if [[ -n "${dev_name-}" ]]; then
    vg="${dev_name}-${vg}"
  fi
  vgcreate "${vg}" "${luks_dev_path}"
  lvcreate --size "${swap_size}" "${vg}" --name swap
  lvcreate --size "${root_size}" "${vg}" --name root
  lvcreate --extents +100%FREE "${vg}" --name home
  lvdisplay
  # Create root and home filesystems
  mkfs.ext4 "/dev/${vg}/root"
  # -m 0: ext4 reserves 5% of the blocks to root, but it's not critical to do it when
  # /home is separate, so we disable it.
  mkfs.ext4 -m 0 "/dev/${vg}/home"
  # Create swap
  swap_dev="/dev/${vg}/swap"
  mkswap --label swap "${swap_dev}"
  # Mount partitions
  mount "/dev/${vg}/root" "${mnt}"
  mkdir -p -- "${mnt}/home"
  mount "/dev/${vg}/home" "${mnt}/home"
fi

# Create boot and efi partitions.
# shellcheck disable=SC2237
if [[ -n ${efi_part-} ]]; then
  if [[ -n ${boot_part-} ]]; then
    esp="${mnt}/efi"
    mkfs.ext4 "${boot_part}"
    e2label "${boot_part}" "LinuxBoot"
    mkdir -p -- "${mnt}/boot"
    mount "${boot_part}" "${mnt}/boot"
  else
    esp="${mnt}/boot"
  fi
  mkfs.fat -F32 "${efi_part}"
  mkdir -p -- "${esp}"
  mount "${efi_part}" "${esp}"
fi

# Install the base system:
base_packages=(base linux linux-firmware cryptsetup dhcpcd net-tools wireless_tools iw wpa_supplicant intel-ucode sudo openssh polkit ntp wget zsh git python)
if ((btrfs)); then
  base_packages+=(btrfs-progs)
else
  base_packages+=(lvm2)
fi
if ((uefi)); then
  base_packages+=(refind)
else
  base_packages+=(grub)
fi
pacstrap "${mnt}" "${base_packages[@]}"

# Generate fstab:
genfstab -U "${mnt}" >> "${mnt}/etc/fstab"
printf "\n%s none swap defaults 0 0\n" "${swap_dev}" >> "${mnt}/etc/fstab"

# Chroot to the new system and run the chroot script.
cp -p "${DIR}/bootstrap-archlinux-chroot" "${mnt}"
# bootstrap_archlinux_chroot_args=(--machine-name "${machine_name}" --target-disk "${target_disk}" --encrypted-part "${encrypted_part}")
# if ((uefi)); then
#   bootstrap_archlinux_chroot_args+=('--uefi')
# fi
# Export relevant variables in a subshell and run
(
  export machine_name target_disk encrypted_part luks_dev_name uefi btrfs swap_dev
  arch-chroot "${mnt}" /bootstrap-archlinux-chroot
)

# This is needed only for VirtualBox
if [[ ${machine_name} == vbox_uefi ]]; then
  [[ -d "${mnt}"/boot/efi/EFI/boot/ ]] || mkdir "${mnt}"/boot/efi/EFI/boot/
  cp "${mnt}"/boot/efi/EFI/refind/refind_x64.efi "${mnt}"/boot/efi/EFI/boot/bootx64.efi
fi

cat > "${mnt}"/etc/sudoers << 'EOF'
root ALL=(ALL) ALL
%wheel ALL=(ALL) ALL
EOF

# Cleanup and reboot:
# umount -R "${mnt}"
# reboot
