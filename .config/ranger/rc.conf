# NOTE(infokiller): this file only contains settings that differ from the
# defaults. I last fully reviewed all the options in the upstream file on
# 2020-05-06.

# Options {{{ #

# NOTE(infokiller): This is the default and works well for me. I played with 2,2
# and the ueberzug image preview weren't positioned well.
set column_ratios 1,3,4

# Show hidden files by default.
set show_hidden true

# Be aware of version control systems and display information.
# NOTE(infokiller): This is the default. I tested it and it was extremely slow
# in my config repo.
set vcs_aware false

set preview_images true
# Set the preview image method. Below I list the supported methods that are
# relevant for me as of 2020-05-06, and my results in testing them with
# different combos of ranger 1.9.3, kitty 0.17.3, termite v15, and tmux 3.1a.
# - w3m
#   - Disappears when ranger losses focus
#   - Not positioned correctly in tmux, unless the tmux pane is in full screen
# - ueberzug
#   - Works correctly in both kitty and termite with and without tmux 
# - kitty
#   - Doesn't work in tmux (and not intended to work outside pure kitty)
#   - Freezes ranger even without tmux: https://github.com/kovidgoyal/kitty/issues/3864
set preview_images_method w3m

# default, jungle, snow, solarized
set colorscheme solarized

# Draw borders around columns?
set draw_borders true

# Set a title for the window?
set update_title true

# Set the title to "ranger" in the tmux program?
# NOTE(infokiller): even with this setting (and even with update_title set to
# false), ranger messes up the tmux window name, so I fixed it manually in my
# wrapper script.
set update_tmux_title false

# Show hostname in titlebar?
set hostname_in_titlebar false

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar true

# Default is ~, ellipsis is clearer and looks better.
set unicode_ellipsis true

# BIDI support - try to properly display file names in RTL languages (Hebrew, Arabic).
# Requires the python-bidi pip package
# NOTE(infokiller): my tests show that this is only useful for terminals that
# don't support RTL (termite in my case), but it's actually harmful for
# terminals that do support it (kitty), since it renders RTL backwards.
set bidi_support true

set max_history_size 2000
set max_console_history_size 5000

# Changes case sensitivity for the cd command tab completion
set cd_tab_case smart

# Use fuzzy tab completion with the "cd" command. For example,
# ":cd /u/lo/b<tab>" expands to ":cd /usr/local/bin".
set cd_tab_fuzzy true

# ===================================================================
# == Local Options
# ===================================================================
# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

# }}} Options #

# Keybindings {{{ #

# TODO: Remove redundant keybindings (defined using copymap) once I get used to
# the space keybindings.

# Remove confusing/unused defaults {{{ #
# map dc get_cumulative_size
unmap dc
# map du shell -p du --max-depth=1 -h --apparent-size
unmap du
# map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
unmap dU
# map dT console trash
unmap dT
# map = chmod
unmap =
# map <c-i> mark_files toggle=True
unmap <c-i>
# map H history_go -1
unmap H
# map um<any> unset_bookmark %any
unmap um<any>
# map um<bg> draw_bookmarks
unmap um<bg>
# map uq tab_restore
unmap uq
# map <s-tab> tab_move -1
unmap <s-tab>
# map <c-i> mark_files toggle=True
unmap <c-i>
# map <alt><right> tab_move 1
unmap <alt><right>
# map <alt><left> tab_move -1
unmap <alt><left>
# map <alt>j scroll_preview 1
unmap <alt>j
# map <alt>k scroll_preview -1
unmap <alt>k
# map ZZ quit
unmap ZZ
# map ZQ quit
unmap ZQ
# }}} Remove confusing defaults #

# Navigation {{{ #
map i move up=1
map k move down=1
map j move left=1
map l move right=1

map K move down=0.5  pages=True
map I move up=0.5    pages=True
map J history_go -1
map L history_go +1

map gd eval fm.cd(os.getenv('XDG_DOWNLOAD_DIR', '~/downloads'))
map gc eval fm.cd('~/gdrive')
map gp cd ~/projects
map gm eval fm.cd('/run/media/' + os.getenv('USER'))
map gs cd ~/src

map f console search_inc%space

map <Space>ff fzf_my_select
map <Space>fF fzf_select
copymap <Space>ff <C-f>
map <Space>fr recent_files
map <Space>dr recent_directories
map rd recent_directories
map rf recent_files

map K scroll_preview 1
map I scroll_preview -1
# }}} Navigation #

# Selecting files {{{ #
map <Tab> mark_files toggle=True
map v toggle_visual_mode
map V toggle_visual_mode
# }}} Selecting files #

# Opening files {{{ #
# The default ranger config uses keybindings with an o prefix for sorting, so we
# need to unmap those. We can also set RANGER_LOAD_DEFAULT_RC to FALSE instead
# of having to unmap default keybindings.
eval for k in 'zrsbnmcateSBNMCATE': cmd(f'unmap o{k}')
map oo move right=1
# "Open with" with O.
map O chain draw_possible_programs; console open_with%%space
map e edit
map oe edit
map oh eval fm.run("tmux splitw -h 'rifle \"" + fm.thisfile.path + "\"'")
map ov eval fm.run("tmux splitw -v 'rifle \"" + fm.thisfile.path + "\"'")
map ow eval fm.run("tmux new-window 'rifle \"" + fm.thisfile.path + "\"'")
# Extract archive.
map ox shell aunpack %s 
# }}} Opening files #

# Renaming and deleting {{{ #
map <A-n> rename_append
map cw eval fm.execute_console("bulkrename") if fm.thisdir.marked_items else fm.open_console("rename ")
map D trash_put
map dD delete
# }}} Renaming and deleting #

# Filtering {{{ #
# map h setlocal show_hidden
# NOTE: I tried to set show_hidden to false by default only in my home directory
# (which contains many irrelevant hidden files), but it doesn't work well
# because it causes ranger to not show hidden files in any directory below the
# home directory. The `path=<path>` option to `setlocal` should support regexes
# to prevent this (as mentioned in the man page), but it didn't work in my
# tests.
# setlocal path=~ show_hidden false
# map h eval fm.execute_console('setlocal path="{}" show_hidden {}'.format(fm.thisdir, str(not fm.settings.show_hidden)))
map h set show_hidden!
unmap <Backspace>
unmap <Backspace2>
# Mnemonic: select. Not using f (filter) because it's more consistent to use it
# for files as in vim.
map <Space>sd filter_stack add type d
map <Space>sf filter_stack add type f
map <Space>sl filter_stack add type l
map <Space>sm console filter_stack add mime%space
map <Space>sn console filter_stack add name%space
map <Space>s# console filter_stack add hash%space
map <Space>s" filter_stack add duplicate
map <Space>s' filter_stack add unique
map <Space>s| filter_stack add or
map <Space>s& filter_stack add and
map <Space>s! filter_stack add not
map <Space>sr filter_stack rotate
map <Space>sc filter_stack clear
map <Space>s* filter_stack decompose
map <Space>sp filter_stack pop
map <Space>ss filter_stack show
# }}} Filtering #

# Sorting {{{ #
map sr set sort_reverse!
map ss chain set sort=size;      set sort_reverse=False
map sb chain set sort=basename;  set sort_reverse=False
map sn chain set sort=natural;   set sort_reverse=False
map sm chain set sort=mtime;     set sort_reverse=False
map sc chain set sort=ctime;     set sort_reverse=False
map sa chain set sort=atime;     set sort_reverse=False
map st chain set sort=type;      set sort_reverse=False
map se chain set sort=extension; set sort_reverse=False
map sS chain set sort=size;      set sort_reverse=True
map sB chain set sort=basename;  set sort_reverse=True
map sN chain set sort=natural;   set sort_reverse=True
map sM chain set sort=mtime;     set sort_reverse=True
map sC chain set sort=ctime;     set sort_reverse=True
map sA chain set sort=atime;     set sort_reverse=True
map sT chain set sort=type;      set sort_reverse=True
map sE chain set sort=extension; set sort_reverse=True
# }}} Sorting #

# Git {{{ #
map <Space>gl shell -p git log --pretty=myshort --color=always %s
map <Space>gp shell -p git log --pretty=mymedium  --patch --color=always -- %s | (diff-so-fancy || delta || cat) 2> /dev/null
map <Space>gt shell -p git log --pretty=mymedium --stat --color=always %s
copymap <Space>gl ogl 
copymap <Space>gp ogp 
copymap <Space>gt ogt 
# }}} Git #

# Line mode {{{ #
# Ranger can show some information next to the files in the current directory,
# and this can be changed with the keybindings below.

# File count for directories, size for files. Default.
map <Space>lf linemode filename
map <Space>li linemode fileinfo
map <Space>lm linemode mtime
map <Space>lp linemode permissions
map <Space>ls linemode sizemtime
# }}} Line mode #

# Misc {{{ #
# Count size/lines
map <Space>cs get_cumulative_size
map <Space>cl shell -p line-count-by-subfolder %s | sort -r -n -k 2 | column -t
map <Space>cf fzf_select_by_line_count
copymap <Space>cs ocs
copymap <Space>cl ocl 
copymap <Space>cf ocf 
# Moving in the command line
cmap <A-[>1;5D eval fm.ui.console.move_word(left=1)
cmap <A-[>1;5C eval fm.ui.console.move_word(right=1)
# cmap <C-left>   eval fm.ui.console.move_word(left=1)
# cmap <C-right>  eval fm.ui.console.move_word(right=1)

pmap i pager_move up=1
pmap k pager_move down=1
pmap j pager_move left=4
pmap l pager_move right=4
unpmap h
# }}} Misc #

# }}} Keybindings #
