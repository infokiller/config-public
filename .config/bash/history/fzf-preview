#!/usr/bin/env bash
# Fzf preview script used for shell history

# TODO: Consider using a separate preview process that communicates with the
# preview script using a fifo file, which should improve performance by
# eliminating any latency in starting the preview process. For an example see:
# ~/.config/ipython/profile_default/startup/10-keybindings.py

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

: "${PREVIEW_LINES_BEFORE:=4}"
: "${PREVIEW_LINES_AFTER:=4}"
MAX_COLUMNS="${FZF_PREVIEW_COLUMNS:-${COLUMNS:-80}}"
PREVIEW_COLUMNS=$((MAX_COLUMNS > 120 ? 120 : MAX_COLUMNS))

_print_usage_and_die() {
  printf >&2 'Usage: fzf-preview <list_file> <lines>+\n'
  exit 1
}

_grep_line() {
  local line="${1}"
  rg --text --fixed-strings "${line}" \
    --max-count=1 \
    --before-context="${PREVIEW_LINES_BEFORE}" \
    --after-context="${PREVIEW_LINES_AFTER}"
}

_run_bat() {
  local match_begin="${1}"
  local match_end="${2}"
  local is_multi_select="${3}"
  local datetime_str="${4}"
  local cmd=(bat '--color=always' '--paging=never' '--wrap=character'
    "--terminal-width=${PREVIEW_COLUMNS}" '--language=sh'
    "--highlight-line=$((match_begin + 1)):${match_end}")
  # When there are multiple lines we need to match, print the datetime of the first line
  # so we can see the context.
  if ((is_multi_select)); then
    cmd+=('--style=grid,header' "--file-name=${datetime_str}")
  else
    cmd+=(--style=plain)
  fi
  "${cmd[@]}"
}

_get_highlight_marklines_plugin() {
  for dir in "${HOME}/.local" '/usr/local' '/usr'; do
    local file="${dir}/share/highlight/plugins/mark_lines.lua"
    if [[ -r "${file}" ]]; then
      printf '%s' "${file}"
      return
    fi
  done
  return 1
}

_run_highlight() {
  local match_begin="${1}"
  local match_end="${2}"
  local is_multi_select="${3}"
  local datetime_str="${4}"
  local cmd=(highlight --force --syntax-by-name=bash --out-format=truecolor --quiet
    --line-length="${PREVIEW_COLUMNS}")
  local mark_lines_plugin
  if mark_lines_plugin="$(_get_highlight_marklines_plugin)"; then
    cmd+=("--plug-in=${mark_lines_plugin}"
      "--plug-in-param=$((match_begin + 1))-${match_end}")
  fi
  # When there are multiple lines we need to match, print the datetime of the first line
  # so we can see the context.
  if ((is_multi_select)); then
    printf '<--- %s --->\n' "${datetime_str}"
  fi
  "${cmd[@]}"
}

main() {
  if (($# < 2)); then
    _print_usage_and_die
  fi
  local list_file="${1}"
  local lines=("${@:2}")
  is_multi_select=$((${#lines[@]} > 1))
  local match_output=()
  for line in "${lines[@]}"; do
    mapfile -t match_output < <(_grep_line "${line}" < "${list_file}")
    if ((${#match_output[@]} == 0)); then
      echo "ERROR: no match for line: ${line}"
      continue
    fi
    local first_output="${match_output[0]}"
    local datetime_str="${first_output:0:19}"
    local match_begin=0
    local match_end=0
    for ((i = 0; i < ${#match_output[@]}; i++)); do
      formatted_output="${match_output[i]}"
      # Remove the datetime from the beginning of the line.
      formatted_output="${formatted_output:22}"
      # echo "${match_output[i]}"
      # echo "${formatted_output}"
      if [[ "${match_output[i]}" == "${line}" ]]; then
        match_begin="${i}"
        formatted_output="${formatted_output//â†µ/$'\n'}"
        mapfile -t match_lines <<< "${formatted_output}"
        match_end=$((match_begin + ${#match_lines[@]}))
      fi
      match_output[i]="${formatted_output}"
    done
    printf '%s\n' "${match_output[@]}" |
      # _run_highlight "${match_begin}" "${match_end}" "${is_multi_select}" "${datetime_str}"
      _run_bat "${match_begin}" "${match_end}" "${is_multi_select}" "${datetime_str}"
  done
}

main "$@"
