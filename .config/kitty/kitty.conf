# vim: set fileencoding=utf-8 ft=conf foldmethod=marker :
#
# See default config:
# https://gist.github.com/infokiller/8bb28d8f5142160e1def28d2ad1ab36f

# Fonts {{{

font_family      MyMono
font_size        14.0
disable_ligatures always

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 100000

enable_audio_bell no

# }}}

# Color scheme {{{
# Based on Solarized Dark [1, 2] but modified [3] to fix invisible text [4]
# [1] https://github.com/romainl/flattened#tui
# [2] https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/kitty/iTerm2%20Solarized%20Dark.conf
# [3] https://github.com/kdrag0n/base16-kitty/blob/master/colors/base16-solarized-dark.conf
# [4] https://github.com/altercation/solarized/issues/220

cursor                #93a1a1
foreground            #93a1a1
background            #002b36
selection_foreground  #002b36
selection_background  #93a1a1
cursor #93a1a1
url_color #839496
active_border_color #657b83
inactive_border_color #073642
active_tab_background #002b36
active_tab_foreground #93a1a1
inactive_tab_background #073642
inactive_tab_foreground #839496
tab_bar_background #073642

# The 16 terminal colors. There are 8 basic colors, each color has a
# dark and bright version. For example, color0 is dark black, color8 is bright black.
# You can also set the remaining colors from the 256 color table as color16 to color255.

# black
color0  #435961
color8  #657b83
# red
color1  #dc322f
color9  #cb4b16
# green
color2  #859900
color10 #586e75
# yellow
color3  #b58900
color11 #586e75
# blue
color4  #268bd2
color12 #839496
# magenta
color5  #6c71c4
color13 #eee8d5
# cyan
color6  #2aa198
color14 #d33682
# white
color7  #93a1a1
color15 #fdf6e3

# }}}

# Tabs and layouts {{{
active_tab_title_template none
tab_title_template "{index}: {title}"
tab_bar_edge top
# }}} Tabs and splits

# Keyboard shortcuts {{{
# Docs {{{

# For a list of key names, see: the GLFW key macros
# <https://github.com/kovidgoyal/kitty/blob/master/glfw/glfw3.h#L349>.
# The name to use is the part after the GLFW_KEY_ prefix. For a list
# of modifier names, see: GLFW mods
# <https://www.glfw.org/docs/latest/group__mods.html>

# On Linux you can also use XKB key names to bind keys that are not
# supported by GLFW. See XKB keys
# <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
# keysyms.h> for a list of key names. The name to use is the part
# after the XKB_KEY_ prefix. Note that you can only use an XKB key
# name for keys that are not known as GLFW keys.

# Finally, you can use raw system key codes to map keys, again only
# for keys that are not known as GLFW keys. To see the system key
# code for a key, start kitty with the kitty --debug-keyboard option.
# Then kitty will output some debug text for every key event. In that
# text look for ``native_code`` the value of that becomes the key
# name in the shortcut. For example:

# .. code-block: none

#     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

# Here, the key name for the A key is 0x61 and you can use it with:

#     map ctrl+0x61 something

# to map ctrl+a to something.

# You can use the special action no_op to unmap a keyboard shortcut
# that is assigned in the default configuration:

#     map kitty_mod+space no_op

# You can combine multiple actions to be triggered by a single
# shortcut, using the syntax below:

#     map key combine <separator> action1 <separator> action2 <separator> action3 ...

# For example:

#     map kitty_mod+e combine : new_window : next_layout

# this will create a new window and switch to the next available
# layout

# You can use multi-key shortcuts using the syntax shown below:

#     map key1>key2>key3 action

# For example:

#     map ctrl+f>2 set_font_size 20

# }}} Docs

# Kitty mod {{{

# The value of kitty_mod is used as the modifier for all default shortcuts, you
# can change it in your kitty.conf to change the modifiers for all the default
# shortcuts.
kitty_mod ctrl+shift

# }}} Kitty mod

# Clipboard {{{

map kitty_mod+v        paste_from_clipboard
map kitty_mod+s        paste_from_selection
map kitty_mod+c        copy_to_clipboard
map shift+insert       paste_from_selection

# You can also pass the contents of the current selection to any
# program using pass_selection_to_program. By default, the system's
# open program is used, but you can specify your own, the selection
# will be passed as a command line argument to the program, for
# example:

#     map kitty_mod+o pass_selection_to_program firefox

# You can pass the current selection to a terminal program running in
# a new kitty window, by using the @selection placeholder:

#     map kitty_mod+y new_window less @selection

#     map kitty_mod+y new_window less @selection
map kitty_mod+o  pass_selection_to_program

# }}}

# Scrolling {{{
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+i         scroll_line_up
map kitty_mod+j         no_op
map kitty_mod+k         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback
# }}}

# Changing font size and ligatures {{{

# You can change the font size for all top-level kitty OS windows at
# a time or only the current one.

map kitty_mod+equal change_font_size all +2.0
map kitty_mod+minus change_font_size all -2.0
map kitty_mod+0     change_font_size all 0

map kitty_mod+l>equal disable_ligatures_in active never
map kitty_mod+l>minus disable_ligatures_in active always
map kitty_mod+l>c     disable_ligatures_in active cursor

# To setup shortcuts for specific font sizes:

#     map kitty_mod+f6 change_font_size all 10.0

# To setup shortcuts to change only the current OS window's font
# size:

#     map kitty_mod+f6 change_font_size current 10.0
# }}}

# Selecting and act on visible text {{{

# Use the hints kitten to select text and either pass it to an
# external program or insert it into the terminal or copy it to the
# clipboard.

map kitty_mod+e kitten hints

# Open a currently visible URL using the keyboard. The program used
# to open the URL is specified in open_url_with.

map kitty_mod+p>f kitten hints --type path --program -

# Select a path/filename and insert it into the terminal. Useful, for
# instance to run git commands on a filename output from a previous
# git command.

map kitty_mod+p>shift+f kitten hints --type path

# Select a path/filename and open it with the default open program.

map kitty_mod+p>l kitten hints --type line --program -

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1

map kitty_mod+p>w kitten hints --type word --program -

# Select words and insert into terminal.

map kitty_mod+p>h kitten hints --type hash --program -

# Select something that looks like a hash and insert it into the
# terminal. Useful with git, which uses sha1 hashes to identify
# commits

map kitty_mod+p>n kitten hints --type linenum

# Select something that looks like filename:linenum and open it in
# vim at the specified line number.


# The hints kitten has many more modes of operation that you can map
# to different shortcuts. For a full description see kittens/hints.
# }}}

# Tabs {{{
map kitty_mod+1 goto_tab 1
map kitty_mod+2 goto_tab 2
map kitty_mod+3 goto_tab 3
map kitty_mod+4 goto_tab 4
map kitty_mod+5 goto_tab 5
map kitty_mod+6 goto_tab 6
map kitty_mod+7 goto_tab 7
map kitty_mod+8 goto_tab 8
map kitty_mod+9 goto_tab 9
# Goes to previously active tab
map kitty_mod+; goto_tab -1
# }}} Tabs

# Miscellaneous {{{

map kitty_mod+f11    toggle_fullscreen
map kitty_mod+f10    toggle_maximized
map kitty_mod+u      kitten unicode_input
map kitty_mod+f2     edit_config_file
map kitty_mod+escape kitty_shell window

# Open the kitty shell in a new window/tab/overlay/os_window to
# control kitty using commands.

# NOTE(infokiller): these keybindings only work if dynamic_background_opacity is
# set.
# map kitty_mod+b>equal set_background_opacity +0.1
# map kitty_mod+b>minus set_background_opacity -0.1
# map kitty_mod+b>1     set_background_opacity 1
# map kitty_mod+b>d     set_background_opacity default
# map kitty_mod+delete  clear_terminal reset active

# You can create shortcuts to clear/reset the terminal. For example:

#     # Reset the terminal
#     map kitty_mod+f9 clear_terminal reset active
#     # Clear the terminal screen by erasing all contents
#     map kitty_mod+f10 clear_terminal clear active
#     # Clear the terminal scrollback by erasing it
#     map kitty_mod+f11 clear_terminal scrollback active
#     # Scroll the contents of the screen into the scrollback
#     map kitty_mod+f12 clear_terminal scroll active

# If you want to operate on all windows instead of just the current
# one, use all instead of active.

# It is also possible to remap Ctrl+L to both scroll the current
# screen contents into the scrollback buffer and clear the screen,
# instead of just clearing the screen:
#
# NOTE(infokiller): This makes Kitty behave more like I expect on ctrl+l, but it
# causes a weird issue in tmux where the status bar becomes hidden temporarily,
# so I'm disabling it. For the original issue that created this mapping see:
# https://github.com/kovidgoyal/kitty/issues/1113#issuecomment-435588611
# map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c


# You can tell kitty to send arbitrary (UTF-8) encoded text to the
# client program when pressing specified shortcut keys. For example:

#     map ctrl+alt+a send_text all Special text

# This will send "Special text" when you press the ctrl+alt+a key
# combination.  The text to be sent is a python string literal so you
# can use escapes like \x1b to send control codes or \u21fb to send
# unicode characters (or you can just input the unicode characters
# directly as UTF-8 text). The first argument to send_text is the
# keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated
# combination of them.  The special keyword all means all modes. The
# modes normal and application refer to the DECCKM cursor key mode
# for terminals, and kitty refers to the special kitty extended
# keyboard protocol.

# Another example, that outputs a word and then moves the cursor to
# the start of the line (same as pressing the Home key):

#     map ctrl+alt+a send_text normal Word\x1b[H
#     map ctrl+alt+a send_text application Word\x1bOH

confirm_os_window_close 2

# }}}
# }}}
